
Atmega32_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000786  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000007fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002f  00800060  00800060  000007fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000082c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001717  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b38  00000000  00000000  000020d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cd6  00000000  00000000  00002c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000040c  00000000  00000000  000038e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000091b  00000000  00000000  00003cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ef  00000000  00000000  0000460f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004efe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__vector_10>
  2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_11>
  30:	0c 94 be 01 	jmp	0x37c	; 0x37c <__vector_12>
  34:	0c 94 37 03 	jmp	0x66e	; 0x66e <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e8       	ldi	r30, 0x86	; 134
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 38       	cpi	r26, 0x8F	; 143
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 c1 03 	jmp	0x782	; 0x782 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

uint32_t ADC_Data;
uint32_t RLM,LLM,RSM,LSM;
USART_Config_t _Uart;
int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	27 97       	sbiw	r28, 0x07	; 7
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	ADC_Config_t adc_cfg;
	adc_cfg.ADC_Mode = ADC_MODE_SINGLE_CONVERSION;
  a6:	19 82       	std	Y+1, r1	; 0x01
	adc_cfg.ADC_Prescaler = ADC_PRESCALER_64;
  a8:	86 e0       	ldi	r24, 0x06	; 6
  aa:	8c 83       	std	Y+4, r24	; 0x04
	adc_cfg.ADC_Res_presentation = ADC_RES_PRESENTATION_LEFT_ADJUSTED;
  ac:	80 e2       	ldi	r24, 0x20	; 32
  ae:	8b 83       	std	Y+3, r24	; 0x03
	adc_cfg.ADC_Volt_Ref = ADC_VOLT_REF_AVCC;
  b0:	80 e4       	ldi	r24, 0x40	; 64
  b2:	8a 83       	std	Y+2, r24	; 0x02
	adc_cfg.ADC_IRQ_Enable = ADC_IRQ_ENABLE_NONE;
  b4:	1d 82       	std	Y+5, r1	; 0x05
	adc_cfg.P_CallBack = NULL;
  b6:	1f 82       	std	Y+7, r1	; 0x07
  b8:	1e 82       	std	Y+6, r1	; 0x06
	MCAL_ADC_Init(&adc_cfg);
  ba:	ce 01       	movw	r24, r28
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	0e 94 39 01 	call	0x272	; 0x272 <MCAL_ADC_Init>
		
	_Uart.BaudRate = USART_BaudRate_19200;
  c2:	e4 e6       	ldi	r30, 0x64	; 100
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	89 e1       	ldi	r24, 0x19	; 25
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	a0 e0       	ldi	r26, 0x00	; 0
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	82 83       	std	Z+2, r24	; 0x02
  d0:	93 83       	std	Z+3, r25	; 0x03
  d2:	a4 83       	std	Z+4, r26	; 0x04
  d4:	b5 83       	std	Z+5, r27	; 0x05
	_Uart.Parity = UART_Parity_None;
  d6:	11 86       	std	Z+9, r1	; 0x09
  d8:	10 86       	std	Z+8, r1	; 0x08
	_Uart.StopBits = UART_StopBits_1;
  da:	13 86       	std	Z+11, r1	; 0x0b
  dc:	12 86       	std	Z+10, r1	; 0x0a
	_Uart.IRQ_Enable = UART_IRQ_None;
  de:	15 86       	std	Z+13, r1	; 0x0d
  e0:	14 86       	std	Z+12, r1	; 0x0c
	_Uart.Payload_Length = UART_Payload_Length_8;
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	97 83       	std	Z+7, r25	; 0x07
  e8:	86 83       	std	Z+6, r24	; 0x06
	_Uart.USART_Mode = USART_Mode_Async;
  ea:	11 82       	std	Z+1, r1	; 0x01
  ec:	10 82       	st	Z, r1
	MCAL_USART_Init(&_Uart);
  ee:	cf 01       	movw	r24, r30
  f0:	0e 94 36 02 	call	0x46c	; 0x46c <MCAL_USART_Init>
	
	while(1){
	MCAL_ADC_Get_Result(ADC0,&ADC_Data,ADC_ENABLE);
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	64 e8       	ldi	r22, 0x84	; 132
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	0e 94 7d 01 	call	0x2fa	; 0x2fa <MCAL_ADC_Get_Result>
	RLM = (((ADC_Data *5000) / 1024) /10);
 100:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <ADC_Data>
 104:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <ADC_Data+0x1>
 108:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <ADC_Data+0x2>
 10c:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <ADC_Data+0x3>
 110:	a8 e8       	ldi	r26, 0x88	; 136
 112:	b3 e1       	ldi	r27, 0x13	; 19
 114:	0e 94 a7 03 	call	0x74e	; 0x74e <__muluhisi3>
 118:	0f 2e       	mov	r0, r31
 11a:	c1 2c       	mov	r12, r1
 11c:	f8 e2       	ldi	r31, 0x28	; 40
 11e:	df 2e       	mov	r13, r31
 120:	e1 2c       	mov	r14, r1
 122:	f1 2c       	mov	r15, r1
 124:	f0 2d       	mov	r31, r0
 126:	a7 01       	movw	r20, r14
 128:	96 01       	movw	r18, r12
 12a:	0e 94 85 03 	call	0x70a	; 0x70a <__udivmodsi4>
 12e:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <RLM>
 132:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <RLM+0x1>
 136:	40 93 82 00 	sts	0x0082, r20	; 0x800082 <RLM+0x2>
 13a:	50 93 83 00 	sts	0x0083, r21	; 0x800083 <RLM+0x3>
	MCAL_ADC_Get_Result(ADC1,&ADC_Data,ADC_ENABLE);
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	64 e8       	ldi	r22, 0x84	; 132
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 7d 01 	call	0x2fa	; 0x2fa <MCAL_ADC_Get_Result>
	LLM = (((ADC_Data *5000) / 1024) /10);
 14a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <ADC_Data>
 14e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <ADC_Data+0x1>
 152:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <ADC_Data+0x2>
 156:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <ADC_Data+0x3>
 15a:	a8 e8       	ldi	r26, 0x88	; 136
 15c:	b3 e1       	ldi	r27, 0x13	; 19
 15e:	0e 94 a7 03 	call	0x74e	; 0x74e <__muluhisi3>
 162:	a7 01       	movw	r20, r14
 164:	96 01       	movw	r18, r12
 166:	0e 94 85 03 	call	0x70a	; 0x70a <__udivmodsi4>
 16a:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <LLM>
 16e:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <LLM+0x1>
 172:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <LLM+0x2>
 176:	50 93 7f 00 	sts	0x007F, r21	; 0x80007f <LLM+0x3>
	MCAL_ADC_Get_Result(ADC2,&ADC_Data,ADC_ENABLE);
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	64 e8       	ldi	r22, 0x84	; 132
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	0e 94 7d 01 	call	0x2fa	; 0x2fa <MCAL_ADC_Get_Result>
	RSM = (((ADC_Data *5000) / 1024) /50);
 186:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <ADC_Data>
 18a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <ADC_Data+0x1>
 18e:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <ADC_Data+0x2>
 192:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <ADC_Data+0x3>
 196:	a8 e8       	ldi	r26, 0x88	; 136
 198:	b3 e1       	ldi	r27, 0x13	; 19
 19a:	0e 94 a7 03 	call	0x74e	; 0x74e <__muluhisi3>
 19e:	0f 2e       	mov	r0, r31
 1a0:	c1 2c       	mov	r12, r1
 1a2:	f8 ec       	ldi	r31, 0xC8	; 200
 1a4:	df 2e       	mov	r13, r31
 1a6:	e1 2c       	mov	r14, r1
 1a8:	f1 2c       	mov	r15, r1
 1aa:	f0 2d       	mov	r31, r0
 1ac:	a7 01       	movw	r20, r14
 1ae:	96 01       	movw	r18, r12
 1b0:	0e 94 85 03 	call	0x70a	; 0x70a <__udivmodsi4>
 1b4:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <RSM>
 1b8:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <RSM+0x1>
 1bc:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <RSM+0x2>
 1c0:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <RSM+0x3>
	MCAL_ADC_Get_Result(ADC3,&ADC_Data,ADC_ENABLE);
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	64 e8       	ldi	r22, 0x84	; 132
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	83 e0       	ldi	r24, 0x03	; 3
 1cc:	0e 94 7d 01 	call	0x2fa	; 0x2fa <MCAL_ADC_Get_Result>
	LSM = (((ADC_Data *5000) / 1024) /50);
 1d0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <ADC_Data>
 1d4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <ADC_Data+0x1>
 1d8:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <ADC_Data+0x2>
 1dc:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <ADC_Data+0x3>
 1e0:	a8 e8       	ldi	r26, 0x88	; 136
 1e2:	b3 e1       	ldi	r27, 0x13	; 19
 1e4:	0e 94 a7 03 	call	0x74e	; 0x74e <__muluhisi3>
 1e8:	a7 01       	movw	r20, r14
 1ea:	96 01       	movw	r18, r12
 1ec:	0e 94 85 03 	call	0x70a	; 0x70a <__udivmodsi4>
 1f0:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <LSM>
 1f4:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <LSM+0x1>
 1f8:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <LSM+0x2>
 1fc:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <LSM+0x3>
	MCAL_USART_Transmit((uint8_t)RLM,USART_enable);
 200:	61 e0       	ldi	r22, 0x01	; 1
 202:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <RLM>
 206:	0e 94 2a 03 	call	0x654	; 0x654 <MCAL_USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20a:	2f ef       	ldi	r18, 0xFF	; 255
 20c:	80 e7       	ldi	r24, 0x70	; 112
 20e:	92 e0       	ldi	r25, 0x02	; 2
 210:	21 50       	subi	r18, 0x01	; 1
 212:	80 40       	sbci	r24, 0x00	; 0
 214:	90 40       	sbci	r25, 0x00	; 0
 216:	e1 f7       	brne	.-8      	; 0x210 <main+0x17e>
 218:	00 c0       	rjmp	.+0      	; 0x21a <main+0x188>
 21a:	00 00       	nop
	_delay_ms(100);
	MCAL_USART_Transmit((uint8_t)LLM,USART_enable);
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <LLM>
 222:	0e 94 2a 03 	call	0x654	; 0x654 <MCAL_USART_Transmit>
 226:	2f ef       	ldi	r18, 0xFF	; 255
 228:	80 e7       	ldi	r24, 0x70	; 112
 22a:	92 e0       	ldi	r25, 0x02	; 2
 22c:	21 50       	subi	r18, 0x01	; 1
 22e:	80 40       	sbci	r24, 0x00	; 0
 230:	90 40       	sbci	r25, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <main+0x19a>
 234:	00 c0       	rjmp	.+0      	; 0x236 <main+0x1a4>
 236:	00 00       	nop
	_delay_ms(100);
	MCAL_USART_Transmit((uint8_t)RSM,USART_enable);
 238:	61 e0       	ldi	r22, 0x01	; 1
 23a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <RSM>
 23e:	0e 94 2a 03 	call	0x654	; 0x654 <MCAL_USART_Transmit>
 242:	2f ef       	ldi	r18, 0xFF	; 255
 244:	80 e7       	ldi	r24, 0x70	; 112
 246:	92 e0       	ldi	r25, 0x02	; 2
 248:	21 50       	subi	r18, 0x01	; 1
 24a:	80 40       	sbci	r24, 0x00	; 0
 24c:	90 40       	sbci	r25, 0x00	; 0
 24e:	e1 f7       	brne	.-8      	; 0x248 <main+0x1b6>
 250:	00 c0       	rjmp	.+0      	; 0x252 <main+0x1c0>
 252:	00 00       	nop
	_delay_ms(100);
	MCAL_USART_Transmit((uint8_t)LSM,USART_enable);
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <LSM>
 25a:	0e 94 2a 03 	call	0x654	; 0x654 <MCAL_USART_Transmit>
 25e:	2f ef       	ldi	r18, 0xFF	; 255
 260:	80 e7       	ldi	r24, 0x70	; 112
 262:	92 e0       	ldi	r25, 0x02	; 2
 264:	21 50       	subi	r18, 0x01	; 1
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <main+0x1d2>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <main+0x1dc>
 26e:	00 00       	nop
 270:	41 cf       	rjmp	.-382    	; 0xf4 <main+0x62>

00000272 <MCAL_ADC_Init>:
	}
}
void MCAL_ADC_DeInit(void){
	ADMUX = 0x0;
	ADCSRA =0x0;
	SFIOR &= ~(1<<5 | 1<<6 | 1<<7);
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	ec 01       	movw	r28, r24
 278:	87 e0       	ldi	r24, 0x07	; 7
 27a:	fe 01       	movw	r30, r28
 27c:	a8 e8       	ldi	r26, 0x88	; 136
 27e:	b0 e0       	ldi	r27, 0x00	; 0
 280:	01 90       	ld	r0, Z+
 282:	0d 92       	st	X+, r0
 284:	8a 95       	dec	r24
 286:	e1 f7       	brne	.-8      	; 0x280 <MCAL_ADC_Init+0xe>
 288:	96 b1       	in	r25, 0x06	; 6
 28a:	88 81       	ld	r24, Y
 28c:	89 2b       	or	r24, r25
 28e:	86 b9       	out	0x06, r24	; 6
 290:	96 b1       	in	r25, 0x06	; 6
 292:	8c 81       	ldd	r24, Y+4	; 0x04
 294:	89 2b       	or	r24, r25
 296:	86 b9       	out	0x06, r24	; 6
 298:	97 b1       	in	r25, 0x07	; 7
 29a:	8a 81       	ldd	r24, Y+2	; 0x02
 29c:	89 2b       	or	r24, r25
 29e:	87 b9       	out	0x07, r24	; 7
 2a0:	97 b1       	in	r25, 0x07	; 7
 2a2:	8b 81       	ldd	r24, Y+3	; 0x03
 2a4:	89 2b       	or	r24, r25
 2a6:	87 b9       	out	0x07, r24	; 7
 2a8:	97 b1       	in	r25, 0x07	; 7
 2aa:	89 81       	ldd	r24, Y+1	; 0x01
 2ac:	89 2b       	or	r24, r25
 2ae:	87 b9       	out	0x07, r24	; 7
 2b0:	8c 81       	ldd	r24, Y+4	; 0x04
 2b2:	88 30       	cpi	r24, 0x08	; 8
 2b4:	19 f4       	brne	.+6      	; 0x2bc <MCAL_ADC_Init+0x4a>
 2b6:	8f b7       	in	r24, 0x3f	; 63
 2b8:	80 68       	ori	r24, 0x80	; 128
 2ba:	8f bf       	out	0x3f, r24	; 63
 2bc:	86 b1       	in	r24, 0x06	; 6
 2be:	80 68       	ori	r24, 0x80	; 128
 2c0:	86 b9       	out	0x06, r24	; 6
 2c2:	28 81       	ld	r18, Y
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	46 b1       	in	r20, 0x06	; 6
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <MCAL_ADC_Init+0x60>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	4a 95       	dec	r20
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <MCAL_ADC_Init+0x5c>
 2d6:	99 27       	eor	r25, r25
 2d8:	28 17       	cp	r18, r24
 2da:	39 07       	cpc	r19, r25
 2dc:	19 f4       	brne	.+6      	; 0x2e4 <MCAL_ADC_Init+0x72>
 2de:	86 b1       	in	r24, 0x06	; 6
 2e0:	80 64       	ori	r24, 0x40	; 64
 2e2:	86 b9       	out	0x06, r24	; 6
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <MCAL_ADC_Start_Conversion>:
}

void MCAL_ADC_Start_Conversion(void){
	if(G_ADC_Config.ADC_Mode == ADC_MODE_SINGLE_CONVERSION){
 2ea:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <G_ADC_Config>
 2ee:	81 11       	cpse	r24, r1
 2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <MCAL_ADC_Start_Conversion+0xe>
		SET_BIT(ADCSRA,6);
 2f2:	86 b1       	in	r24, 0x06	; 6
 2f4:	80 64       	ori	r24, 0x40	; 64
 2f6:	86 b9       	out	0x06, r24	; 6
 2f8:	08 95       	ret

000002fa <MCAL_ADC_Get_Result>:
	}
}
void MCAL_ADC_Get_Result(Channel_Select_t channel,uint16_t *data,Polling_Mechanism_t polling){
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	eb 01       	movw	r28, r22
 302:	14 2f       	mov	r17, r20
	ADMUX &= ~(0x1F);
 304:	97 b1       	in	r25, 0x07	; 7
 306:	90 7e       	andi	r25, 0xE0	; 224
 308:	97 b9       	out	0x07, r25	; 7
	ADMUX |= (uint8_t)channel;
 30a:	97 b1       	in	r25, 0x07	; 7
 30c:	98 2b       	or	r25, r24
 30e:	97 b9       	out	0x07, r25	; 7
	CLEAR_BIT(DDRA,channel);
 310:	4a b3       	in	r20, 0x1a	; 26
 312:	21 e0       	ldi	r18, 0x01	; 1
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	b9 01       	movw	r22, r18
 318:	02 c0       	rjmp	.+4      	; 0x31e <MCAL_ADC_Get_Result+0x24>
 31a:	66 0f       	add	r22, r22
 31c:	77 1f       	adc	r23, r23
 31e:	8a 95       	dec	r24
 320:	e2 f7       	brpl	.-8      	; 0x31a <MCAL_ADC_Get_Result+0x20>
 322:	cb 01       	movw	r24, r22
 324:	80 95       	com	r24
 326:	84 23       	and	r24, r20
 328:	8a bb       	out	0x1a, r24	; 26
	MCAL_ADC_Start_Conversion();
 32a:	0e 94 75 01 	call	0x2ea	; 0x2ea <MCAL_ADC_Start_Conversion>
	
	if(polling == ADC_ENABLE){
 32e:	11 11       	cpse	r17, r1
 330:	02 c0       	rjmp	.+4      	; 0x336 <MCAL_ADC_Get_Result+0x3c>
		while(!READ_BIT(ADCSRA,4));
 332:	34 9b       	sbis	0x06, 4	; 6
 334:	fe cf       	rjmp	.-4      	; 0x332 <MCAL_ADC_Get_Result+0x38>
	}
	if(G_ADC_Config.ADC_Res_presentation == ADC_RES_PRESENTATION_RIGHT_ADJUSTED){
 336:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <G_ADC_Config+0x2>
 33a:	81 11       	cpse	r24, r1
 33c:	0a c0       	rjmp	.+20     	; 0x352 <MCAL_ADC_Get_Result+0x58>
		*data = (ADCL | ((ADCH & (0x03)) <<8 ));
 33e:	24 b1       	in	r18, 0x04	; 4
 340:	85 b1       	in	r24, 0x05	; 5
 342:	83 70       	andi	r24, 0x03	; 3
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	98 2f       	mov	r25, r24
 348:	88 27       	eor	r24, r24
 34a:	82 2b       	or	r24, r18
 34c:	99 83       	std	Y+1, r25	; 0x01
 34e:	88 83       	st	Y, r24
 350:	0e c0       	rjmp	.+28     	; 0x36e <MCAL_ADC_Get_Result+0x74>
	}
	else{
		*data = ((ADCL & (0xC0)) >>6)  | (ADCH << 2);
 352:	24 b1       	in	r18, 0x04	; 4
 354:	22 95       	swap	r18
 356:	26 95       	lsr	r18
 358:	26 95       	lsr	r18
 35a:	23 70       	andi	r18, 0x03	; 3
 35c:	85 b1       	in	r24, 0x05	; 5
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	82 2b       	or	r24, r18
 36a:	99 83       	std	Y+1, r25	; 0x01
 36c:	88 83       	st	Y, r24
	}
	CLEAR_BIT(ADCSRA, 4);
 36e:	86 b1       	in	r24, 0x06	; 6
 370:	8f 7e       	andi	r24, 0xEF	; 239
 372:	86 b9       	out	0x06, r24	; 6

}
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	1f 91       	pop	r17
 37a:	08 95       	ret

0000037c <__vector_12>:

	*data = SPI->SPDR ;
}

ISR(SPI_STC_vect)
{
 37c:	1f 92       	push	r1
 37e:	0f 92       	push	r0
 380:	0f b6       	in	r0, 0x3f	; 63
 382:	0f 92       	push	r0
 384:	11 24       	eor	r1, r1
 386:	2f 93       	push	r18
 388:	3f 93       	push	r19
 38a:	4f 93       	push	r20
 38c:	5f 93       	push	r21
 38e:	6f 93       	push	r22
 390:	7f 93       	push	r23
 392:	8f 93       	push	r24
 394:	9f 93       	push	r25
 396:	af 93       	push	r26
 398:	bf 93       	push	r27
 39a:	ef 93       	push	r30
 39c:	ff 93       	push	r31
	G_SPI_Config->P_IRQ_CallBack();
 39e:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3a2:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3a6:	00 88       	ldd	r0, Z+16	; 0x10
 3a8:	f1 89       	ldd	r31, Z+17	; 0x11
 3aa:	e0 2d       	mov	r30, r0
 3ac:	09 95       	icall
 3ae:	ff 91       	pop	r31
 3b0:	ef 91       	pop	r30
 3b2:	bf 91       	pop	r27
 3b4:	af 91       	pop	r26
 3b6:	9f 91       	pop	r25
 3b8:	8f 91       	pop	r24
 3ba:	7f 91       	pop	r23
 3bc:	6f 91       	pop	r22
 3be:	5f 91       	pop	r21
 3c0:	4f 91       	pop	r20
 3c2:	3f 91       	pop	r19
 3c4:	2f 91       	pop	r18
 3c6:	0f 90       	pop	r0
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	0f 90       	pop	r0
 3cc:	1f 90       	pop	r1
 3ce:	18 95       	reti

000003d0 <__vector_11>:
		OCR0 = (uint8_t)(255 - Duty_Cycle);
	}
}

ISR(TIMER0_OVF_vect)
{
 3d0:	1f 92       	push	r1
 3d2:	0f 92       	push	r0
 3d4:	0f b6       	in	r0, 0x3f	; 63
 3d6:	0f 92       	push	r0
 3d8:	11 24       	eor	r1, r1
 3da:	2f 93       	push	r18
 3dc:	3f 93       	push	r19
 3de:	4f 93       	push	r20
 3e0:	5f 93       	push	r21
 3e2:	6f 93       	push	r22
 3e4:	7f 93       	push	r23
 3e6:	8f 93       	push	r24
 3e8:	9f 93       	push	r25
 3ea:	af 93       	push	r26
 3ec:	bf 93       	push	r27
 3ee:	ef 93       	push	r30
 3f0:	ff 93       	push	r31
	GP_IRQ_CallBack();
 3f2:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <GP_IRQ_CallBack>
 3f6:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <GP_IRQ_CallBack+0x1>
 3fa:	09 95       	icall
}
 3fc:	ff 91       	pop	r31
 3fe:	ef 91       	pop	r30
 400:	bf 91       	pop	r27
 402:	af 91       	pop	r26
 404:	9f 91       	pop	r25
 406:	8f 91       	pop	r24
 408:	7f 91       	pop	r23
 40a:	6f 91       	pop	r22
 40c:	5f 91       	pop	r21
 40e:	4f 91       	pop	r20
 410:	3f 91       	pop	r19
 412:	2f 91       	pop	r18
 414:	0f 90       	pop	r0
 416:	0f be       	out	0x3f, r0	; 63
 418:	0f 90       	pop	r0
 41a:	1f 90       	pop	r1
 41c:	18 95       	reti

0000041e <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 41e:	1f 92       	push	r1
 420:	0f 92       	push	r0
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	0f 92       	push	r0
 426:	11 24       	eor	r1, r1
 428:	2f 93       	push	r18
 42a:	3f 93       	push	r19
 42c:	4f 93       	push	r20
 42e:	5f 93       	push	r21
 430:	6f 93       	push	r22
 432:	7f 93       	push	r23
 434:	8f 93       	push	r24
 436:	9f 93       	push	r25
 438:	af 93       	push	r26
 43a:	bf 93       	push	r27
 43c:	ef 93       	push	r30
 43e:	ff 93       	push	r31
	GP_IRQ_CallBack();
 440:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <GP_IRQ_CallBack>
 444:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <GP_IRQ_CallBack+0x1>
 448:	09 95       	icall
 44a:	ff 91       	pop	r31
 44c:	ef 91       	pop	r30
 44e:	bf 91       	pop	r27
 450:	af 91       	pop	r26
 452:	9f 91       	pop	r25
 454:	8f 91       	pop	r24
 456:	7f 91       	pop	r23
 458:	6f 91       	pop	r22
 45a:	5f 91       	pop	r21
 45c:	4f 91       	pop	r20
 45e:	3f 91       	pop	r19
 460:	2f 91       	pop	r18
 462:	0f 90       	pop	r0
 464:	0f be       	out	0x3f, r0	; 63
 466:	0f 90       	pop	r0
 468:	1f 90       	pop	r1
 46a:	18 95       	reti

0000046c <MCAL_USART_Init>:
	USART->UDR = '\0';
}
void MCAL_USART_Receive_String(char* str){
	while(1)
	{
		while(!(USART->UCSRA.bits.RXC));
 46c:	fc 01       	movw	r30, r24
 46e:	82 81       	ldd	r24, Z+2	; 0x02
 470:	89 b9       	out	0x09, r24	; 9
 472:	80 81       	ld	r24, Z
 474:	91 81       	ldd	r25, Z+1	; 0x01
 476:	00 97       	sbiw	r24, 0x00	; 0
 478:	39 f4       	brne	.+14     	; 0x488 <MCAL_USART_Init+0x1c>
 47a:	80 b5       	in	r24, 0x20	; 32
 47c:	80 68       	ori	r24, 0x80	; 128
 47e:	80 bd       	out	0x20, r24	; 32
 480:	80 b5       	in	r24, 0x20	; 32
 482:	8f 7b       	andi	r24, 0xBF	; 191
 484:	80 bd       	out	0x20, r24	; 32
 486:	09 c0       	rjmp	.+18     	; 0x49a <MCAL_USART_Init+0x2e>
 488:	80 34       	cpi	r24, 0x40	; 64
 48a:	91 05       	cpc	r25, r1
 48c:	31 f4       	brne	.+12     	; 0x49a <MCAL_USART_Init+0x2e>
 48e:	80 b5       	in	r24, 0x20	; 32
 490:	80 68       	ori	r24, 0x80	; 128
 492:	80 bd       	out	0x20, r24	; 32
 494:	80 b5       	in	r24, 0x20	; 32
 496:	80 64       	ori	r24, 0x40	; 64
 498:	80 bd       	out	0x20, r24	; 32
 49a:	8b b1       	in	r24, 0x0b	; 11
 49c:	8d 7f       	andi	r24, 0xFD	; 253
 49e:	8b b9       	out	0x0b, r24	; 11
 4a0:	80 85       	ldd	r24, Z+8	; 0x08
 4a2:	91 85       	ldd	r25, Z+9	; 0x09
 4a4:	00 97       	sbiw	r24, 0x00	; 0
 4a6:	51 f4       	brne	.+20     	; 0x4bc <MCAL_USART_Init+0x50>
 4a8:	80 b5       	in	r24, 0x20	; 32
 4aa:	80 68       	ori	r24, 0x80	; 128
 4ac:	80 bd       	out	0x20, r24	; 32
 4ae:	80 b5       	in	r24, 0x20	; 32
 4b0:	8f 7e       	andi	r24, 0xEF	; 239
 4b2:	80 bd       	out	0x20, r24	; 32
 4b4:	80 b5       	in	r24, 0x20	; 32
 4b6:	8f 7d       	andi	r24, 0xDF	; 223
 4b8:	80 bd       	out	0x20, r24	; 32
 4ba:	18 c0       	rjmp	.+48     	; 0x4ec <MCAL_USART_Init+0x80>
 4bc:	81 30       	cpi	r24, 0x01	; 1
 4be:	91 05       	cpc	r25, r1
 4c0:	51 f4       	brne	.+20     	; 0x4d6 <MCAL_USART_Init+0x6a>
 4c2:	80 b5       	in	r24, 0x20	; 32
 4c4:	80 68       	ori	r24, 0x80	; 128
 4c6:	80 bd       	out	0x20, r24	; 32
 4c8:	80 b5       	in	r24, 0x20	; 32
 4ca:	8f 7e       	andi	r24, 0xEF	; 239
 4cc:	80 bd       	out	0x20, r24	; 32
 4ce:	80 b5       	in	r24, 0x20	; 32
 4d0:	80 62       	ori	r24, 0x20	; 32
 4d2:	80 bd       	out	0x20, r24	; 32
 4d4:	0b c0       	rjmp	.+22     	; 0x4ec <MCAL_USART_Init+0x80>
 4d6:	02 97       	sbiw	r24, 0x02	; 2
 4d8:	49 f4       	brne	.+18     	; 0x4ec <MCAL_USART_Init+0x80>
 4da:	80 b5       	in	r24, 0x20	; 32
 4dc:	80 68       	ori	r24, 0x80	; 128
 4de:	80 bd       	out	0x20, r24	; 32
 4e0:	80 b5       	in	r24, 0x20	; 32
 4e2:	80 61       	ori	r24, 0x10	; 16
 4e4:	80 bd       	out	0x20, r24	; 32
 4e6:	80 b5       	in	r24, 0x20	; 32
 4e8:	80 62       	ori	r24, 0x20	; 32
 4ea:	80 bd       	out	0x20, r24	; 32
 4ec:	82 85       	ldd	r24, Z+10	; 0x0a
 4ee:	93 85       	ldd	r25, Z+11	; 0x0b
 4f0:	00 97       	sbiw	r24, 0x00	; 0
 4f2:	39 f4       	brne	.+14     	; 0x502 <MCAL_USART_Init+0x96>
 4f4:	80 b5       	in	r24, 0x20	; 32
 4f6:	80 68       	ori	r24, 0x80	; 128
 4f8:	80 bd       	out	0x20, r24	; 32
 4fa:	80 b5       	in	r24, 0x20	; 32
 4fc:	87 7f       	andi	r24, 0xF7	; 247
 4fe:	80 bd       	out	0x20, r24	; 32
 500:	08 c0       	rjmp	.+16     	; 0x512 <MCAL_USART_Init+0xa6>
 502:	01 97       	sbiw	r24, 0x01	; 1
 504:	31 f4       	brne	.+12     	; 0x512 <MCAL_USART_Init+0xa6>
 506:	80 b5       	in	r24, 0x20	; 32
 508:	80 68       	ori	r24, 0x80	; 128
 50a:	80 bd       	out	0x20, r24	; 32
 50c:	80 b5       	in	r24, 0x20	; 32
 50e:	88 60       	ori	r24, 0x08	; 8
 510:	80 bd       	out	0x20, r24	; 32
 512:	86 81       	ldd	r24, Z+6	; 0x06
 514:	97 81       	ldd	r25, Z+7	; 0x07
 516:	82 30       	cpi	r24, 0x02	; 2
 518:	91 05       	cpc	r25, r1
 51a:	31 f1       	breq	.+76     	; 0x568 <MCAL_USART_Init+0xfc>
 51c:	28 f4       	brcc	.+10     	; 0x528 <MCAL_USART_Init+0xbc>
 51e:	00 97       	sbiw	r24, 0x00	; 0
 520:	49 f0       	breq	.+18     	; 0x534 <MCAL_USART_Init+0xc8>
 522:	01 97       	sbiw	r24, 0x01	; 1
 524:	a1 f0       	breq	.+40     	; 0x54e <MCAL_USART_Init+0xe2>
 526:	46 c0       	rjmp	.+140    	; 0x5b4 <MCAL_USART_Init+0x148>
 528:	83 30       	cpi	r24, 0x03	; 3
 52a:	91 05       	cpc	r25, r1
 52c:	51 f1       	breq	.+84     	; 0x582 <MCAL_USART_Init+0x116>
 52e:	04 97       	sbiw	r24, 0x04	; 4
 530:	a9 f1       	breq	.+106    	; 0x59c <MCAL_USART_Init+0x130>
 532:	40 c0       	rjmp	.+128    	; 0x5b4 <MCAL_USART_Init+0x148>
 534:	80 b5       	in	r24, 0x20	; 32
 536:	80 68       	ori	r24, 0x80	; 128
 538:	80 bd       	out	0x20, r24	; 32
 53a:	80 b5       	in	r24, 0x20	; 32
 53c:	8d 7f       	andi	r24, 0xFD	; 253
 53e:	80 bd       	out	0x20, r24	; 32
 540:	80 b5       	in	r24, 0x20	; 32
 542:	8b 7f       	andi	r24, 0xFB	; 251
 544:	80 bd       	out	0x20, r24	; 32
 546:	8a b1       	in	r24, 0x0a	; 10
 548:	8b 7f       	andi	r24, 0xFB	; 251
 54a:	8a b9       	out	0x0a, r24	; 10
 54c:	33 c0       	rjmp	.+102    	; 0x5b4 <MCAL_USART_Init+0x148>
 54e:	80 b5       	in	r24, 0x20	; 32
 550:	80 68       	ori	r24, 0x80	; 128
 552:	80 bd       	out	0x20, r24	; 32
 554:	80 b5       	in	r24, 0x20	; 32
 556:	82 60       	ori	r24, 0x02	; 2
 558:	80 bd       	out	0x20, r24	; 32
 55a:	80 b5       	in	r24, 0x20	; 32
 55c:	8b 7f       	andi	r24, 0xFB	; 251
 55e:	80 bd       	out	0x20, r24	; 32
 560:	8a b1       	in	r24, 0x0a	; 10
 562:	8b 7f       	andi	r24, 0xFB	; 251
 564:	8a b9       	out	0x0a, r24	; 10
 566:	26 c0       	rjmp	.+76     	; 0x5b4 <MCAL_USART_Init+0x148>
 568:	80 b5       	in	r24, 0x20	; 32
 56a:	80 68       	ori	r24, 0x80	; 128
 56c:	80 bd       	out	0x20, r24	; 32
 56e:	80 b5       	in	r24, 0x20	; 32
 570:	8d 7f       	andi	r24, 0xFD	; 253
 572:	80 bd       	out	0x20, r24	; 32
 574:	80 b5       	in	r24, 0x20	; 32
 576:	84 60       	ori	r24, 0x04	; 4
 578:	80 bd       	out	0x20, r24	; 32
 57a:	8a b1       	in	r24, 0x0a	; 10
 57c:	8b 7f       	andi	r24, 0xFB	; 251
 57e:	8a b9       	out	0x0a, r24	; 10
 580:	19 c0       	rjmp	.+50     	; 0x5b4 <MCAL_USART_Init+0x148>
 582:	80 b5       	in	r24, 0x20	; 32
 584:	80 68       	ori	r24, 0x80	; 128
 586:	80 bd       	out	0x20, r24	; 32
 588:	80 b5       	in	r24, 0x20	; 32
 58a:	82 60       	ori	r24, 0x02	; 2
 58c:	80 bd       	out	0x20, r24	; 32
 58e:	80 b5       	in	r24, 0x20	; 32
 590:	84 60       	ori	r24, 0x04	; 4
 592:	80 bd       	out	0x20, r24	; 32
 594:	8a b1       	in	r24, 0x0a	; 10
 596:	8b 7f       	andi	r24, 0xFB	; 251
 598:	8a b9       	out	0x0a, r24	; 10
 59a:	0c c0       	rjmp	.+24     	; 0x5b4 <MCAL_USART_Init+0x148>
 59c:	80 b5       	in	r24, 0x20	; 32
 59e:	80 68       	ori	r24, 0x80	; 128
 5a0:	80 bd       	out	0x20, r24	; 32
 5a2:	80 b5       	in	r24, 0x20	; 32
 5a4:	82 60       	ori	r24, 0x02	; 2
 5a6:	80 bd       	out	0x20, r24	; 32
 5a8:	80 b5       	in	r24, 0x20	; 32
 5aa:	84 60       	ori	r24, 0x04	; 4
 5ac:	80 bd       	out	0x20, r24	; 32
 5ae:	8a b1       	in	r24, 0x0a	; 10
 5b0:	84 60       	ori	r24, 0x04	; 4
 5b2:	8a b9       	out	0x0a, r24	; 10
 5b4:	84 85       	ldd	r24, Z+12	; 0x0c
 5b6:	95 85       	ldd	r25, Z+13	; 0x0d
 5b8:	00 97       	sbiw	r24, 0x00	; 0
 5ba:	c1 f1       	breq	.+112    	; 0x62c <MCAL_USART_Init+0x1c0>
 5bc:	01 97       	sbiw	r24, 0x01	; 1
 5be:	79 f4       	brne	.+30     	; 0x5de <MCAL_USART_Init+0x172>
 5c0:	8a b1       	in	r24, 0x0a	; 10
 5c2:	8f 77       	andi	r24, 0x7F	; 127
 5c4:	8a b9       	out	0x0a, r24	; 10
 5c6:	8a b1       	in	r24, 0x0a	; 10
 5c8:	80 64       	ori	r24, 0x40	; 64
 5ca:	8a b9       	out	0x0a, r24	; 10
 5cc:	86 85       	ldd	r24, Z+14	; 0x0e
 5ce:	97 85       	ldd	r25, Z+15	; 0x0f
 5d0:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <GP_IRQ_CallBack+0x1>
 5d4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <GP_IRQ_CallBack>
 5d8:	8f b7       	in	r24, 0x3f	; 63
 5da:	80 68       	ori	r24, 0x80	; 128
 5dc:	8f bf       	out	0x3f, r24	; 63
 5de:	84 85       	ldd	r24, Z+12	; 0x0c
 5e0:	95 85       	ldd	r25, Z+13	; 0x0d
 5e2:	02 97       	sbiw	r24, 0x02	; 2
 5e4:	79 f4       	brne	.+30     	; 0x604 <MCAL_USART_Init+0x198>
 5e6:	8a b1       	in	r24, 0x0a	; 10
 5e8:	80 68       	ori	r24, 0x80	; 128
 5ea:	8a b9       	out	0x0a, r24	; 10
 5ec:	8a b1       	in	r24, 0x0a	; 10
 5ee:	8f 7b       	andi	r24, 0xBF	; 191
 5f0:	8a b9       	out	0x0a, r24	; 10
 5f2:	86 85       	ldd	r24, Z+14	; 0x0e
 5f4:	97 85       	ldd	r25, Z+15	; 0x0f
 5f6:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <GP_IRQ_CallBack+0x1>
 5fa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <GP_IRQ_CallBack>
 5fe:	8f b7       	in	r24, 0x3f	; 63
 600:	80 68       	ori	r24, 0x80	; 128
 602:	8f bf       	out	0x3f, r24	; 63
 604:	84 85       	ldd	r24, Z+12	; 0x0c
 606:	95 85       	ldd	r25, Z+13	; 0x0d
 608:	03 97       	sbiw	r24, 0x03	; 3
 60a:	e9 f4       	brne	.+58     	; 0x646 <MCAL_USART_Init+0x1da>
 60c:	8a b1       	in	r24, 0x0a	; 10
 60e:	80 68       	ori	r24, 0x80	; 128
 610:	8a b9       	out	0x0a, r24	; 10
 612:	8a b1       	in	r24, 0x0a	; 10
 614:	80 64       	ori	r24, 0x40	; 64
 616:	8a b9       	out	0x0a, r24	; 10
 618:	86 85       	ldd	r24, Z+14	; 0x0e
 61a:	97 85       	ldd	r25, Z+15	; 0x0f
 61c:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <GP_IRQ_CallBack+0x1>
 620:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <GP_IRQ_CallBack>
 624:	8f b7       	in	r24, 0x3f	; 63
 626:	80 68       	ori	r24, 0x80	; 128
 628:	8f bf       	out	0x3f, r24	; 63
 62a:	0d c0       	rjmp	.+26     	; 0x646 <MCAL_USART_Init+0x1da>
 62c:	8a b1       	in	r24, 0x0a	; 10
 62e:	8f 77       	andi	r24, 0x7F	; 127
 630:	8a b9       	out	0x0a, r24	; 10
 632:	8a b1       	in	r24, 0x0a	; 10
 634:	8f 7b       	andi	r24, 0xBF	; 191
 636:	8a b9       	out	0x0a, r24	; 10
 638:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <GP_IRQ_CallBack+0x1>
 63c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <GP_IRQ_CallBack>
 640:	8f b7       	in	r24, 0x3f	; 63
 642:	8f 77       	andi	r24, 0x7F	; 127
 644:	8f bf       	out	0x3f, r24	; 63
 646:	8a b1       	in	r24, 0x0a	; 10
 648:	88 60       	ori	r24, 0x08	; 8
 64a:	8a b9       	out	0x0a, r24	; 10
 64c:	8a b1       	in	r24, 0x0a	; 10
 64e:	80 61       	ori	r24, 0x10	; 16
 650:	8a b9       	out	0x0a, r24	; 10
 652:	08 95       	ret

00000654 <MCAL_USART_Transmit>:
 654:	61 30       	cpi	r22, 0x01	; 1
 656:	11 f4       	brne	.+4      	; 0x65c <MCAL_USART_Transmit+0x8>
 658:	5d 9b       	sbis	0x0b, 5	; 11
 65a:	fe cf       	rjmp	.-4      	; 0x658 <MCAL_USART_Transmit+0x4>
 65c:	52 9b       	sbis	0x0a, 2	; 10
 65e:	05 c0       	rjmp	.+10     	; 0x66a <MCAL_USART_Transmit+0x16>
 660:	9a b1       	in	r25, 0x0a	; 10
 662:	9e 7f       	andi	r25, 0xFE	; 254
 664:	9a b9       	out	0x0a, r25	; 10
 666:	8c b9       	out	0x0c, r24	; 12
 668:	08 95       	ret
 66a:	8c b9       	out	0x0c, r24	; 12
 66c:	08 95       	ret

0000066e <__vector_13>:
		}
	}
}

ISR(USART_RXC_vect)
{
 66e:	1f 92       	push	r1
 670:	0f 92       	push	r0
 672:	0f b6       	in	r0, 0x3f	; 63
 674:	0f 92       	push	r0
 676:	11 24       	eor	r1, r1
 678:	2f 93       	push	r18
 67a:	3f 93       	push	r19
 67c:	4f 93       	push	r20
 67e:	5f 93       	push	r21
 680:	6f 93       	push	r22
 682:	7f 93       	push	r23
 684:	8f 93       	push	r24
 686:	9f 93       	push	r25
 688:	af 93       	push	r26
 68a:	bf 93       	push	r27
 68c:	ef 93       	push	r30
 68e:	ff 93       	push	r31
	GP_IRQ_CallBack();
 690:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <GP_IRQ_CallBack>
 694:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <GP_IRQ_CallBack+0x1>
 698:	09 95       	icall
}
 69a:	ff 91       	pop	r31
 69c:	ef 91       	pop	r30
 69e:	bf 91       	pop	r27
 6a0:	af 91       	pop	r26
 6a2:	9f 91       	pop	r25
 6a4:	8f 91       	pop	r24
 6a6:	7f 91       	pop	r23
 6a8:	6f 91       	pop	r22
 6aa:	5f 91       	pop	r21
 6ac:	4f 91       	pop	r20
 6ae:	3f 91       	pop	r19
 6b0:	2f 91       	pop	r18
 6b2:	0f 90       	pop	r0
 6b4:	0f be       	out	0x3f, r0	; 63
 6b6:	0f 90       	pop	r0
 6b8:	1f 90       	pop	r1
 6ba:	18 95       	reti

000006bc <__vector_15>:

ISR(USART_TXC_vect)
{
 6bc:	1f 92       	push	r1
 6be:	0f 92       	push	r0
 6c0:	0f b6       	in	r0, 0x3f	; 63
 6c2:	0f 92       	push	r0
 6c4:	11 24       	eor	r1, r1
 6c6:	2f 93       	push	r18
 6c8:	3f 93       	push	r19
 6ca:	4f 93       	push	r20
 6cc:	5f 93       	push	r21
 6ce:	6f 93       	push	r22
 6d0:	7f 93       	push	r23
 6d2:	8f 93       	push	r24
 6d4:	9f 93       	push	r25
 6d6:	af 93       	push	r26
 6d8:	bf 93       	push	r27
 6da:	ef 93       	push	r30
 6dc:	ff 93       	push	r31
	GP_IRQ_CallBack();
 6de:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <GP_IRQ_CallBack>
 6e2:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <GP_IRQ_CallBack+0x1>
 6e6:	09 95       	icall
 6e8:	ff 91       	pop	r31
 6ea:	ef 91       	pop	r30
 6ec:	bf 91       	pop	r27
 6ee:	af 91       	pop	r26
 6f0:	9f 91       	pop	r25
 6f2:	8f 91       	pop	r24
 6f4:	7f 91       	pop	r23
 6f6:	6f 91       	pop	r22
 6f8:	5f 91       	pop	r21
 6fa:	4f 91       	pop	r20
 6fc:	3f 91       	pop	r19
 6fe:	2f 91       	pop	r18
 700:	0f 90       	pop	r0
 702:	0f be       	out	0x3f, r0	; 63
 704:	0f 90       	pop	r0
 706:	1f 90       	pop	r1
 708:	18 95       	reti

0000070a <__udivmodsi4>:
 70a:	a1 e2       	ldi	r26, 0x21	; 33
 70c:	1a 2e       	mov	r1, r26
 70e:	aa 1b       	sub	r26, r26
 710:	bb 1b       	sub	r27, r27
 712:	fd 01       	movw	r30, r26
 714:	0d c0       	rjmp	.+26     	; 0x730 <__udivmodsi4_ep>

00000716 <__udivmodsi4_loop>:
 716:	aa 1f       	adc	r26, r26
 718:	bb 1f       	adc	r27, r27
 71a:	ee 1f       	adc	r30, r30
 71c:	ff 1f       	adc	r31, r31
 71e:	a2 17       	cp	r26, r18
 720:	b3 07       	cpc	r27, r19
 722:	e4 07       	cpc	r30, r20
 724:	f5 07       	cpc	r31, r21
 726:	20 f0       	brcs	.+8      	; 0x730 <__udivmodsi4_ep>
 728:	a2 1b       	sub	r26, r18
 72a:	b3 0b       	sbc	r27, r19
 72c:	e4 0b       	sbc	r30, r20
 72e:	f5 0b       	sbc	r31, r21

00000730 <__udivmodsi4_ep>:
 730:	66 1f       	adc	r22, r22
 732:	77 1f       	adc	r23, r23
 734:	88 1f       	adc	r24, r24
 736:	99 1f       	adc	r25, r25
 738:	1a 94       	dec	r1
 73a:	69 f7       	brne	.-38     	; 0x716 <__udivmodsi4_loop>
 73c:	60 95       	com	r22
 73e:	70 95       	com	r23
 740:	80 95       	com	r24
 742:	90 95       	com	r25
 744:	9b 01       	movw	r18, r22
 746:	ac 01       	movw	r20, r24
 748:	bd 01       	movw	r22, r26
 74a:	cf 01       	movw	r24, r30
 74c:	08 95       	ret

0000074e <__muluhisi3>:
 74e:	0e 94 b2 03 	call	0x764	; 0x764 <__umulhisi3>
 752:	a5 9f       	mul	r26, r21
 754:	90 0d       	add	r25, r0
 756:	b4 9f       	mul	r27, r20
 758:	90 0d       	add	r25, r0
 75a:	a4 9f       	mul	r26, r20
 75c:	80 0d       	add	r24, r0
 75e:	91 1d       	adc	r25, r1
 760:	11 24       	eor	r1, r1
 762:	08 95       	ret

00000764 <__umulhisi3>:
 764:	a2 9f       	mul	r26, r18
 766:	b0 01       	movw	r22, r0
 768:	b3 9f       	mul	r27, r19
 76a:	c0 01       	movw	r24, r0
 76c:	a3 9f       	mul	r26, r19
 76e:	70 0d       	add	r23, r0
 770:	81 1d       	adc	r24, r1
 772:	11 24       	eor	r1, r1
 774:	91 1d       	adc	r25, r1
 776:	b2 9f       	mul	r27, r18
 778:	70 0d       	add	r23, r0
 77a:	81 1d       	adc	r24, r1
 77c:	11 24       	eor	r1, r1
 77e:	91 1d       	adc	r25, r1
 780:	08 95       	ret

00000782 <_exit>:
 782:	f8 94       	cli

00000784 <__stop_program>:
 784:	ff cf       	rjmp	.-2      	; 0x784 <__stop_program>
