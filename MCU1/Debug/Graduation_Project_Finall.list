
Graduation_Project_Finall.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001be8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001d18  08001d18  00011d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d34  08001d34  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08001d34  08001d34  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d34  08001d34  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d34  08001d34  00011d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d38  08001d38  00011d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08001d3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000074  08001db0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08001db0  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000070f1  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000104a  00000000  00000000  0002718e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001a08  00000000  00000000  000281d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000410  00000000  00000000  00029be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000368  00000000  00000000  00029ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000008b7  00000000  00000000  0002a358  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001721  00000000  00000000  0002ac0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000070cf  00000000  00000000  0002c330  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000333ff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d9c  00000000  00000000  0003347c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000074 	.word	0x20000074
 800014c:	00000000 	.word	0x00000000
 8000150:	08001d00 	.word	0x08001d00

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000078 	.word	0x20000078
 800016c:	08001d00 	.word	0x08001d00

08000170 <delay_ms>:
// =======================================================================================
static void HAL_LCD_KICK(void);

// Function to make delay_ms 1ms
static void delay_ms(uint32_t delay)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < delay; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <delay_ms+0x26>
	{
		for (j = 0; j < 255; j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <delay_ms+0x14>
	for (i = 0; i < delay; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <delay_ms+0xe>
	}
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_4BIT_INIT>:
}

#elif LCD_MODE == LCD_4_BIT_MODE

static void LCD_4BIT_INIT(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	// ======================= Set CTRL Switches to Output ===================

	// RS_SWITCH is Output with Speed 10 MHz (push-pull) mode
	PinConfig.PIN_number = LCD_RS_PIN;
 80001ac:	4b35      	ldr	r3, [pc, #212]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 80001ae:	220f      	movs	r2, #15
 80001b0:	801a      	strh	r2, [r3, #0]
	PinConfig.MODE = OUTPUT_PP;
 80001b2:	4b34      	ldr	r3, [pc, #208]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 80001b4:	2204      	movs	r2, #4
 80001b6:	709a      	strb	r2, [r3, #2]
	PinConfig.SPEED = SPEED_10;
 80001b8:	4b32      	ldr	r3, [pc, #200]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 80001ba:	2201      	movs	r2, #1
 80001bc:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_RS_PORT, &PinConfig);
 80001be:	4931      	ldr	r1, [pc, #196]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 80001c0:	4831      	ldr	r0, [pc, #196]	; (8000288 <LCD_4BIT_INIT+0xe0>)
 80001c2:	f000 fca9 	bl	8000b18 <MCAL_GPIO_init>

	//RW_SWITCH is Output with Speed 10 MHz (push-pull) mode
	PinConfig.PIN_number = LCD_RW_PIN;
 80001c6:	4b2f      	ldr	r3, [pc, #188]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 80001c8:	220e      	movs	r2, #14
 80001ca:	801a      	strh	r2, [r3, #0]
	PinConfig.MODE = OUTPUT_PP;
 80001cc:	4b2d      	ldr	r3, [pc, #180]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 80001ce:	2204      	movs	r2, #4
 80001d0:	709a      	strb	r2, [r3, #2]
	PinConfig.SPEED = SPEED_10;
 80001d2:	4b2c      	ldr	r3, [pc, #176]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 80001d4:	2201      	movs	r2, #1
 80001d6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_RW_PORT, &PinConfig);
 80001d8:	492a      	ldr	r1, [pc, #168]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 80001da:	482b      	ldr	r0, [pc, #172]	; (8000288 <LCD_4BIT_INIT+0xe0>)
 80001dc:	f000 fc9c 	bl	8000b18 <MCAL_GPIO_init>

	//Enable_SWITCH is Output with Speed 10 MHz (push-pull) mode
	PinConfig.PIN_number = LCD_EN_PIN;
 80001e0:	4b28      	ldr	r3, [pc, #160]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 80001e2:	220d      	movs	r2, #13
 80001e4:	801a      	strh	r2, [r3, #0]
	PinConfig.MODE = OUTPUT_PP;
 80001e6:	4b27      	ldr	r3, [pc, #156]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 80001e8:	2204      	movs	r2, #4
 80001ea:	709a      	strb	r2, [r3, #2]
	PinConfig.SPEED = SPEED_10;
 80001ec:	4b25      	ldr	r3, [pc, #148]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_EN_PORT, &PinConfig);
 80001f2:	4924      	ldr	r1, [pc, #144]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 80001f4:	4824      	ldr	r0, [pc, #144]	; (8000288 <LCD_4BIT_INIT+0xe0>)
 80001f6:	f000 fc8f 	bl	8000b18 <MCAL_GPIO_init>

	PinConfig.PIN_number = LCD_D4_PIN;
 80001fa:	4b22      	ldr	r3, [pc, #136]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 80001fc:	2209      	movs	r2, #9
 80001fe:	801a      	strh	r2, [r3, #0]
	PinConfig.MODE = OUTPUT_PP;
 8000200:	4b20      	ldr	r3, [pc, #128]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 8000202:	2204      	movs	r2, #4
 8000204:	709a      	strb	r2, [r3, #2]
	PinConfig.SPEED = SPEED_10;
 8000206:	4b1f      	ldr	r3, [pc, #124]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 8000208:	2201      	movs	r2, #1
 800020a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_D4_PORT, &PinConfig);
 800020c:	491d      	ldr	r1, [pc, #116]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 800020e:	481e      	ldr	r0, [pc, #120]	; (8000288 <LCD_4BIT_INIT+0xe0>)
 8000210:	f000 fc82 	bl	8000b18 <MCAL_GPIO_init>

	PinConfig.PIN_number = LCD_D5_PIN;
 8000214:	4b1b      	ldr	r3, [pc, #108]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 8000216:	220a      	movs	r2, #10
 8000218:	801a      	strh	r2, [r3, #0]
	PinConfig.MODE = OUTPUT_PP;
 800021a:	4b1a      	ldr	r3, [pc, #104]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 800021c:	2204      	movs	r2, #4
 800021e:	709a      	strb	r2, [r3, #2]
	PinConfig.SPEED = SPEED_10;
 8000220:	4b18      	ldr	r3, [pc, #96]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 8000222:	2201      	movs	r2, #1
 8000224:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_D5_PORT, &PinConfig);
 8000226:	4917      	ldr	r1, [pc, #92]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 8000228:	4817      	ldr	r0, [pc, #92]	; (8000288 <LCD_4BIT_INIT+0xe0>)
 800022a:	f000 fc75 	bl	8000b18 <MCAL_GPIO_init>

	PinConfig.PIN_number = LCD_D6_PIN;
 800022e:	4b15      	ldr	r3, [pc, #84]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 8000230:	2207      	movs	r2, #7
 8000232:	801a      	strh	r2, [r3, #0]
	PinConfig.MODE = OUTPUT_PP;
 8000234:	4b13      	ldr	r3, [pc, #76]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 8000236:	2204      	movs	r2, #4
 8000238:	709a      	strb	r2, [r3, #2]
	PinConfig.SPEED = SPEED_10;
 800023a:	4b12      	ldr	r3, [pc, #72]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 800023c:	2201      	movs	r2, #1
 800023e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_D6_PORT, &PinConfig);
 8000240:	4910      	ldr	r1, [pc, #64]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 8000242:	4811      	ldr	r0, [pc, #68]	; (8000288 <LCD_4BIT_INIT+0xe0>)
 8000244:	f000 fc68 	bl	8000b18 <MCAL_GPIO_init>

	PinConfig.PIN_number = LCD_D7_PIN;
 8000248:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 800024a:	220c      	movs	r2, #12
 800024c:	801a      	strh	r2, [r3, #0]
	PinConfig.MODE = OUTPUT_PP;
 800024e:	4b0d      	ldr	r3, [pc, #52]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 8000250:	2204      	movs	r2, #4
 8000252:	709a      	strb	r2, [r3, #2]
	PinConfig.SPEED = SPEED_10;
 8000254:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 8000256:	2201      	movs	r2, #1
 8000258:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_D7_PORT, &PinConfig);
 800025a:	490a      	ldr	r1, [pc, #40]	; (8000284 <LCD_4BIT_INIT+0xdc>)
 800025c:	480a      	ldr	r0, [pc, #40]	; (8000288 <LCD_4BIT_INIT+0xe0>)
 800025e:	f000 fc5b 	bl	8000b18 <MCAL_GPIO_init>

	// Reset EN_SWITCH PIN
	MCAL_write_PIN(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
 8000262:	2200      	movs	r2, #0
 8000264:	210d      	movs	r1, #13
 8000266:	4808      	ldr	r0, [pc, #32]	; (8000288 <LCD_4BIT_INIT+0xe0>)
 8000268:	f000 fd3e 	bl	8000ce8 <MCAL_write_PIN>
	// Reset RS_SWITCH PIN
	MCAL_write_PIN(LCD_RS_PORT, LCD_RS_PIN, LOGIC_LOW);
 800026c:	2200      	movs	r2, #0
 800026e:	210f      	movs	r1, #15
 8000270:	4805      	ldr	r0, [pc, #20]	; (8000288 <LCD_4BIT_INIT+0xe0>)
 8000272:	f000 fd39 	bl	8000ce8 <MCAL_write_PIN>
	// Reset RW_SWITCH PIN
	MCAL_write_PIN(LCD_RW_PORT, LCD_RW_PIN, LOGIC_LOW);
 8000276:	2200      	movs	r2, #0
 8000278:	210e      	movs	r1, #14
 800027a:	4803      	ldr	r0, [pc, #12]	; (8000288 <LCD_4BIT_INIT+0xe0>)
 800027c:	f000 fd34 	bl	8000ce8 <MCAL_write_PIN>
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000230 	.word	0x20000230
 8000288:	40010c00 	.word	0x40010c00

0800028c <HAL_4BIT_LCD_KICK>:

static void HAL_4BIT_LCD_KICK(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	// Set Enable bit
	MCAL_write_PIN(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH);
 8000290:	2201      	movs	r2, #1
 8000292:	210d      	movs	r1, #13
 8000294:	4806      	ldr	r0, [pc, #24]	; (80002b0 <HAL_4BIT_LCD_KICK+0x24>)
 8000296:	f000 fd27 	bl	8000ce8 <MCAL_write_PIN>

	// AC Characteristics : Enable cycle time (R & W ) = 500 ns
	delay_ms(2);
 800029a:	2002      	movs	r0, #2
 800029c:	f7ff ff68 	bl	8000170 <delay_ms>

	// Reset Enable bit
	MCAL_write_PIN(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
 80002a0:	2200      	movs	r2, #0
 80002a2:	210d      	movs	r1, #13
 80002a4:	4802      	ldr	r0, [pc, #8]	; (80002b0 <HAL_4BIT_LCD_KICK+0x24>)
 80002a6:	f000 fd1f 	bl	8000ce8 <MCAL_write_PIN>
}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	40010c00 	.word	0x40010c00

080002b4 <HAL_LCD_GOTO_XY>:
{
	HAL_LCD_WRITE_COMMAND(LCD_CMD_CLEAR_SCREEN);
}

void HAL_LCD_GOTO_XY(uint8_t line, uint8_t position)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	460a      	mov	r2, r1
 80002be:	71fb      	strb	r3, [r7, #7]
 80002c0:	4613      	mov	r3, r2
 80002c2:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d108      	bne.n	80002dc <HAL_LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 80002ca:	79bb      	ldrb	r3, [r7, #6]
 80002cc:	2b0f      	cmp	r3, #15
 80002ce:	d805      	bhi.n	80002dc <HAL_LCD_GOTO_XY+0x28>
		{
			HAL_LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_FIRST_ROW + position);
 80002d0:	79bb      	ldrb	r3, [r7, #6]
 80002d2:	3b80      	subs	r3, #128	; 0x80
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 f82c 	bl	8000334 <HAL_LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	2b02      	cmp	r3, #2
 80002e0:	d108      	bne.n	80002f4 <HAL_LCD_GOTO_XY+0x40>
	{
		if (position < 16 && position >= 0)
 80002e2:	79bb      	ldrb	r3, [r7, #6]
 80002e4:	2b0f      	cmp	r3, #15
 80002e6:	d805      	bhi.n	80002f4 <HAL_LCD_GOTO_XY+0x40>
		{
			HAL_LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_SECOND_ROW + position);
 80002e8:	79bb      	ldrb	r3, [r7, #6]
 80002ea:	3b40      	subs	r3, #64	; 0x40
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 f820 	bl	8000334 <HAL_LCD_WRITE_COMMAND>
		}
	}
}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}

080002fc <HAL_LCD_INIT>:

void HAL_LCD_INIT(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	HAL_LCD_WRITE_COMMAND(LCD_CMD_FUNCTION_8BIT_2LINES);
	HAL_LCD_WRITE_COMMAND(LCD_CMD_ENTRY_MODE);
	HAL_LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_FIRST_ROW);
	HAL_LCD_WRITE_COMMAND(LCD_CMD_DISP_ON_CURSOR_BLINK);
#elif LCD_MODE == LCD_4_BIT_MODE
	delay_ms(20);
 8000300:	2014      	movs	r0, #20
 8000302:	f7ff ff35 	bl	8000170 <delay_ms>
	LCD_4BIT_INIT();
 8000306:	f7ff ff4f 	bl	80001a8 <LCD_4BIT_INIT>
	delay_ms(15);
 800030a:	200f      	movs	r0, #15
 800030c:	f7ff ff30 	bl	8000170 <delay_ms>
	HAL_LCD_WRITE_COMMAND(0x02); // As data sheet
 8000310:	2002      	movs	r0, #2
 8000312:	f000 f80f 	bl	8000334 <HAL_LCD_WRITE_COMMAND>
	HAL_LCD_WRITE_COMMAND(LCD_CMD_FUNCTION_4BIT_2LINES);
 8000316:	2028      	movs	r0, #40	; 0x28
 8000318:	f000 f80c 	bl	8000334 <HAL_LCD_WRITE_COMMAND>
	HAL_LCD_WRITE_COMMAND(LCD_CMD_ENTRY_MODE);
 800031c:	2006      	movs	r0, #6
 800031e:	f000 f809 	bl	8000334 <HAL_LCD_WRITE_COMMAND>
	HAL_LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_FIRST_ROW);
 8000322:	2080      	movs	r0, #128	; 0x80
 8000324:	f000 f806 	bl	8000334 <HAL_LCD_WRITE_COMMAND>
	HAL_LCD_WRITE_COMMAND(LCD_CMD_DISP_ON_CURSOR_BLINK);
 8000328:	200f      	movs	r0, #15
 800032a:	f000 f803 	bl	8000334 <HAL_LCD_WRITE_COMMAND>
#endif
}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
	...

08000334 <HAL_LCD_WRITE_COMMAND>:
#endif
}

// Function to write commands for LCD
void HAL_LCD_WRITE_COMMAND(uint8_t command)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	71fb      	strb	r3, [r7, #7]

#elif LCD_MODE == LCD_4_BIT_MODE
	/* ====== LCD is in 4 bit Mode ====== */

	// Send last four bits of command
    MCAL_write_PIN(LCD_D4_PORT, LCD_D4_PIN, (command >> 4) & 0x01);
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	091b      	lsrs	r3, r3, #4
 8000342:	b2db      	uxtb	r3, r3
 8000344:	f003 0301 	and.w	r3, r3, #1
 8000348:	b2db      	uxtb	r3, r3
 800034a:	461a      	mov	r2, r3
 800034c:	2109      	movs	r1, #9
 800034e:	4833      	ldr	r0, [pc, #204]	; (800041c <HAL_LCD_WRITE_COMMAND+0xe8>)
 8000350:	f000 fcca 	bl	8000ce8 <MCAL_write_PIN>
    MCAL_write_PIN(LCD_D5_PORT, LCD_D5_PIN, (command >> 5) & 0x01);
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	095b      	lsrs	r3, r3, #5
 8000358:	b2db      	uxtb	r3, r3
 800035a:	f003 0301 	and.w	r3, r3, #1
 800035e:	b2db      	uxtb	r3, r3
 8000360:	461a      	mov	r2, r3
 8000362:	210a      	movs	r1, #10
 8000364:	482d      	ldr	r0, [pc, #180]	; (800041c <HAL_LCD_WRITE_COMMAND+0xe8>)
 8000366:	f000 fcbf 	bl	8000ce8 <MCAL_write_PIN>
    MCAL_write_PIN(LCD_D6_PORT, LCD_D6_PIN, (command >> 6) & 0x01);
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	099b      	lsrs	r3, r3, #6
 800036e:	b2db      	uxtb	r3, r3
 8000370:	f003 0301 	and.w	r3, r3, #1
 8000374:	b2db      	uxtb	r3, r3
 8000376:	461a      	mov	r2, r3
 8000378:	2107      	movs	r1, #7
 800037a:	4828      	ldr	r0, [pc, #160]	; (800041c <HAL_LCD_WRITE_COMMAND+0xe8>)
 800037c:	f000 fcb4 	bl	8000ce8 <MCAL_write_PIN>
    MCAL_write_PIN(LCD_D7_PORT, LCD_D7_PIN, (command >> 7) & 0x01);
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	09db      	lsrs	r3, r3, #7
 8000384:	b2db      	uxtb	r3, r3
 8000386:	461a      	mov	r2, r3
 8000388:	210c      	movs	r1, #12
 800038a:	4824      	ldr	r0, [pc, #144]	; (800041c <HAL_LCD_WRITE_COMMAND+0xe8>)
 800038c:	f000 fcac 	bl	8000ce8 <MCAL_write_PIN>
	MCAL_write_PIN(LCD_RW_PORT, LCD_RW_PIN, LOGIC_LOW);
 8000390:	2200      	movs	r2, #0
 8000392:	210e      	movs	r1, #14
 8000394:	4821      	ldr	r0, [pc, #132]	; (800041c <HAL_LCD_WRITE_COMMAND+0xe8>)
 8000396:	f000 fca7 	bl	8000ce8 <MCAL_write_PIN>
	MCAL_write_PIN(LCD_RS_PORT, LCD_RS_PIN, LOGIC_LOW);
 800039a:	2200      	movs	r2, #0
 800039c:	210f      	movs	r1, #15
 800039e:	481f      	ldr	r0, [pc, #124]	; (800041c <HAL_LCD_WRITE_COMMAND+0xe8>)
 80003a0:	f000 fca2 	bl	8000ce8 <MCAL_write_PIN>
	HAL_4BIT_LCD_KICK();
 80003a4:	f7ff ff72 	bl	800028c <HAL_4BIT_LCD_KICK>

	// Send first four bits of command
	MCAL_write_PIN(LCD_D4_PORT, LCD_D4_PIN, (command >> 0) & 0x01);
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	f003 0301 	and.w	r3, r3, #1
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	461a      	mov	r2, r3
 80003b2:	2109      	movs	r1, #9
 80003b4:	4819      	ldr	r0, [pc, #100]	; (800041c <HAL_LCD_WRITE_COMMAND+0xe8>)
 80003b6:	f000 fc97 	bl	8000ce8 <MCAL_write_PIN>
	MCAL_write_PIN(LCD_D5_PORT, LCD_D5_PIN, (command >> 1) & 0x01);
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	085b      	lsrs	r3, r3, #1
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	f003 0301 	and.w	r3, r3, #1
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	461a      	mov	r2, r3
 80003c8:	210a      	movs	r1, #10
 80003ca:	4814      	ldr	r0, [pc, #80]	; (800041c <HAL_LCD_WRITE_COMMAND+0xe8>)
 80003cc:	f000 fc8c 	bl	8000ce8 <MCAL_write_PIN>
	MCAL_write_PIN(LCD_D6_PORT, LCD_D6_PIN, (command >> 2) & 0x01);
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	089b      	lsrs	r3, r3, #2
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	461a      	mov	r2, r3
 80003de:	2107      	movs	r1, #7
 80003e0:	480e      	ldr	r0, [pc, #56]	; (800041c <HAL_LCD_WRITE_COMMAND+0xe8>)
 80003e2:	f000 fc81 	bl	8000ce8 <MCAL_write_PIN>
	MCAL_write_PIN(LCD_D7_PORT, LCD_D7_PIN, (command >> 3) & 0x01);
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	08db      	lsrs	r3, r3, #3
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	f003 0301 	and.w	r3, r3, #1
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	461a      	mov	r2, r3
 80003f4:	210c      	movs	r1, #12
 80003f6:	4809      	ldr	r0, [pc, #36]	; (800041c <HAL_LCD_WRITE_COMMAND+0xe8>)
 80003f8:	f000 fc76 	bl	8000ce8 <MCAL_write_PIN>
	MCAL_write_PIN(LCD_RW_PORT, LCD_RW_PIN, LOGIC_LOW);
 80003fc:	2200      	movs	r2, #0
 80003fe:	210e      	movs	r1, #14
 8000400:	4806      	ldr	r0, [pc, #24]	; (800041c <HAL_LCD_WRITE_COMMAND+0xe8>)
 8000402:	f000 fc71 	bl	8000ce8 <MCAL_write_PIN>
	MCAL_write_PIN(LCD_RS_PORT, LCD_RS_PIN, LOGIC_LOW);
 8000406:	2200      	movs	r2, #0
 8000408:	210f      	movs	r1, #15
 800040a:	4804      	ldr	r0, [pc, #16]	; (800041c <HAL_LCD_WRITE_COMMAND+0xe8>)
 800040c:	f000 fc6c 	bl	8000ce8 <MCAL_write_PIN>
	HAL_4BIT_LCD_KICK();
 8000410:	f7ff ff3c 	bl	800028c <HAL_4BIT_LCD_KICK>
#endif

}
 8000414:	bf00      	nop
 8000416:	3708      	adds	r7, #8
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40010c00 	.word	0x40010c00

08000420 <HAL_LCD_WRITE_CHAR>:

void HAL_LCD_WRITE_CHAR(uint8_t character)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	71fb      	strb	r3, [r7, #7]
#elif LCD_MODE == LCD_4_BIT_MODE
	/* ====== LCD is in 4 bit Mode ====== */


	// Send last four bits of command
    MCAL_write_PIN(LCD_D4_PORT, LCD_D4_PIN, (character >> 4) & 0x01);
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	091b      	lsrs	r3, r3, #4
 800042e:	b2db      	uxtb	r3, r3
 8000430:	f003 0301 	and.w	r3, r3, #1
 8000434:	b2db      	uxtb	r3, r3
 8000436:	461a      	mov	r2, r3
 8000438:	2109      	movs	r1, #9
 800043a:	4833      	ldr	r0, [pc, #204]	; (8000508 <HAL_LCD_WRITE_CHAR+0xe8>)
 800043c:	f000 fc54 	bl	8000ce8 <MCAL_write_PIN>
    MCAL_write_PIN(LCD_D5_PORT, LCD_D5_PIN, (character >> 5) & 0x01);
 8000440:	79fb      	ldrb	r3, [r7, #7]
 8000442:	095b      	lsrs	r3, r3, #5
 8000444:	b2db      	uxtb	r3, r3
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	b2db      	uxtb	r3, r3
 800044c:	461a      	mov	r2, r3
 800044e:	210a      	movs	r1, #10
 8000450:	482d      	ldr	r0, [pc, #180]	; (8000508 <HAL_LCD_WRITE_CHAR+0xe8>)
 8000452:	f000 fc49 	bl	8000ce8 <MCAL_write_PIN>
    MCAL_write_PIN(LCD_D6_PORT, LCD_D6_PIN, (character >> 6) & 0x01);
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	099b      	lsrs	r3, r3, #6
 800045a:	b2db      	uxtb	r3, r3
 800045c:	f003 0301 	and.w	r3, r3, #1
 8000460:	b2db      	uxtb	r3, r3
 8000462:	461a      	mov	r2, r3
 8000464:	2107      	movs	r1, #7
 8000466:	4828      	ldr	r0, [pc, #160]	; (8000508 <HAL_LCD_WRITE_CHAR+0xe8>)
 8000468:	f000 fc3e 	bl	8000ce8 <MCAL_write_PIN>
    MCAL_write_PIN(LCD_D7_PORT, LCD_D7_PIN, (character >> 7) & 0x01);
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	09db      	lsrs	r3, r3, #7
 8000470:	b2db      	uxtb	r3, r3
 8000472:	461a      	mov	r2, r3
 8000474:	210c      	movs	r1, #12
 8000476:	4824      	ldr	r0, [pc, #144]	; (8000508 <HAL_LCD_WRITE_CHAR+0xe8>)
 8000478:	f000 fc36 	bl	8000ce8 <MCAL_write_PIN>
	MCAL_write_PIN(LCD_RW_PORT, LCD_RW_PIN, LOGIC_LOW);
 800047c:	2200      	movs	r2, #0
 800047e:	210e      	movs	r1, #14
 8000480:	4821      	ldr	r0, [pc, #132]	; (8000508 <HAL_LCD_WRITE_CHAR+0xe8>)
 8000482:	f000 fc31 	bl	8000ce8 <MCAL_write_PIN>
	MCAL_write_PIN(LCD_RS_PORT, LCD_RS_PIN, LOGIC_HIGH);
 8000486:	2201      	movs	r2, #1
 8000488:	210f      	movs	r1, #15
 800048a:	481f      	ldr	r0, [pc, #124]	; (8000508 <HAL_LCD_WRITE_CHAR+0xe8>)
 800048c:	f000 fc2c 	bl	8000ce8 <MCAL_write_PIN>
	HAL_4BIT_LCD_KICK();
 8000490:	f7ff fefc 	bl	800028c <HAL_4BIT_LCD_KICK>

	// Send first four bits of command
    MCAL_write_PIN(LCD_D4_PORT, LCD_D4_PIN, (character >> 0) & 0x01);
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	f003 0301 	and.w	r3, r3, #1
 800049a:	b2db      	uxtb	r3, r3
 800049c:	461a      	mov	r2, r3
 800049e:	2109      	movs	r1, #9
 80004a0:	4819      	ldr	r0, [pc, #100]	; (8000508 <HAL_LCD_WRITE_CHAR+0xe8>)
 80004a2:	f000 fc21 	bl	8000ce8 <MCAL_write_PIN>
    MCAL_write_PIN(LCD_D5_PORT, LCD_D5_PIN, (character >> 1) & 0x01);
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	085b      	lsrs	r3, r3, #1
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	f003 0301 	and.w	r3, r3, #1
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	461a      	mov	r2, r3
 80004b4:	210a      	movs	r1, #10
 80004b6:	4814      	ldr	r0, [pc, #80]	; (8000508 <HAL_LCD_WRITE_CHAR+0xe8>)
 80004b8:	f000 fc16 	bl	8000ce8 <MCAL_write_PIN>
    MCAL_write_PIN(LCD_D6_PORT, LCD_D6_PIN, (character >> 2) & 0x01);
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	089b      	lsrs	r3, r3, #2
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	461a      	mov	r2, r3
 80004ca:	2107      	movs	r1, #7
 80004cc:	480e      	ldr	r0, [pc, #56]	; (8000508 <HAL_LCD_WRITE_CHAR+0xe8>)
 80004ce:	f000 fc0b 	bl	8000ce8 <MCAL_write_PIN>
    MCAL_write_PIN(LCD_D7_PORT, LCD_D7_PIN, (character >> 3) & 0x01);
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	08db      	lsrs	r3, r3, #3
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	f003 0301 	and.w	r3, r3, #1
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	461a      	mov	r2, r3
 80004e0:	210c      	movs	r1, #12
 80004e2:	4809      	ldr	r0, [pc, #36]	; (8000508 <HAL_LCD_WRITE_CHAR+0xe8>)
 80004e4:	f000 fc00 	bl	8000ce8 <MCAL_write_PIN>
	MCAL_write_PIN(LCD_RW_PORT, LCD_RW_PIN, LOGIC_LOW);
 80004e8:	2200      	movs	r2, #0
 80004ea:	210e      	movs	r1, #14
 80004ec:	4806      	ldr	r0, [pc, #24]	; (8000508 <HAL_LCD_WRITE_CHAR+0xe8>)
 80004ee:	f000 fbfb 	bl	8000ce8 <MCAL_write_PIN>
	MCAL_write_PIN(LCD_RS_PORT, LCD_RS_PIN, LOGIC_HIGH);
 80004f2:	2201      	movs	r2, #1
 80004f4:	210f      	movs	r1, #15
 80004f6:	4804      	ldr	r0, [pc, #16]	; (8000508 <HAL_LCD_WRITE_CHAR+0xe8>)
 80004f8:	f000 fbf6 	bl	8000ce8 <MCAL_write_PIN>
	HAL_4BIT_LCD_KICK();
 80004fc:	f7ff fec6 	bl	800028c <HAL_4BIT_LCD_KICK>
#endif

}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40010c00 	.word	0x40010c00

0800050c <ADC1_2_IRQHandler>:
        }
    }
}

void ADC1_2_IRQHandler()
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
    if(ADC1->SR.Bit_Name.EOC ==1)
 8000510:	4b13      	ldr	r3, [pc, #76]	; (8000560 <ADC1_2_IRQHandler+0x54>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000518:	b2db      	uxtb	r3, r3
 800051a:	2b01      	cmp	r3, #1
 800051c:	d10f      	bne.n	800053e <ADC1_2_IRQHandler+0x32>
    {

        G_ADC_config[0][(ADC1->SQR3.Bit_Name.SQ1)].g_ADC_callback();
 800051e:	4b10      	ldr	r3, [pc, #64]	; (8000560 <ADC1_2_IRQHandler+0x54>)
 8000520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000522:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8000526:	b2db      	uxtb	r3, r3
 8000528:	4619      	mov	r1, r3
 800052a:	4a0e      	ldr	r2, [pc, #56]	; (8000564 <ADC1_2_IRQHandler+0x58>)
 800052c:	460b      	mov	r3, r1
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	440b      	add	r3, r1
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	4413      	add	r3, r2
 8000536:	3308      	adds	r3, #8
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4798      	blx	r3
    }
    else
    {
        G_ADC_config[1][(ADC2->SQR3.Bit_Name.SQ1)].g_ADC_callback();
    }
}
 800053c:	e00e      	b.n	800055c <ADC1_2_IRQHandler+0x50>
        G_ADC_config[1][(ADC2->SQR3.Bit_Name.SQ1)].g_ADC_callback();
 800053e:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <ADC1_2_IRQHandler+0x5c>)
 8000540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000542:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8000546:	b2db      	uxtb	r3, r3
 8000548:	4619      	mov	r1, r3
 800054a:	4a06      	ldr	r2, [pc, #24]	; (8000564 <ADC1_2_IRQHandler+0x58>)
 800054c:	460b      	mov	r3, r1
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	440b      	add	r3, r1
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	4413      	add	r3, r2
 8000556:	33c8      	adds	r3, #200	; 0xc8
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4798      	blx	r3
}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40012400 	.word	0x40012400
 8000564:	20000090 	.word	0x20000090
 8000568:	40012800 	.word	0x40012800

0800056c <NVIC_ENABLE>:

// ==================================================================================
// ===================================== APIS =======================================
// ==================================================================================
void NVIC_ENABLE(uint8_t irq)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
    switch(irq)
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d854      	bhi.n	8000626 <NVIC_ENABLE+0xba>
 800057c:	a201      	add	r2, pc, #4	; (adr r2, 8000584 <NVIC_ENABLE+0x18>)
 800057e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000582:	bf00      	nop
 8000584:	080005c5 	.word	0x080005c5
 8000588:	080005d3 	.word	0x080005d3
 800058c:	080005e1 	.word	0x080005e1
 8000590:	080005ef 	.word	0x080005ef
 8000594:	080005fd 	.word	0x080005fd
 8000598:	0800060b 	.word	0x0800060b
 800059c:	0800060b 	.word	0x0800060b
 80005a0:	0800060b 	.word	0x0800060b
 80005a4:	0800060b 	.word	0x0800060b
 80005a8:	0800060b 	.word	0x0800060b
 80005ac:	08000619 	.word	0x08000619
 80005b0:	08000619 	.word	0x08000619
 80005b4:	08000619 	.word	0x08000619
 80005b8:	08000619 	.word	0x08000619
 80005bc:	08000619 	.word	0x08000619
 80005c0:	08000619 	.word	0x08000619
    {
    case 0:
        NVIC_EXTI0_EN;
 80005c4:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <NVIC_ENABLE+0xc4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a19      	ldr	r2, [pc, #100]	; (8000630 <NVIC_ENABLE+0xc4>)
 80005ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005ce:	6013      	str	r3, [r2, #0]
        break;
 80005d0:	e029      	b.n	8000626 <NVIC_ENABLE+0xba>
    case 1:
        NVIC_EXTI1_EN;
 80005d2:	4b17      	ldr	r3, [pc, #92]	; (8000630 <NVIC_ENABLE+0xc4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a16      	ldr	r2, [pc, #88]	; (8000630 <NVIC_ENABLE+0xc4>)
 80005d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005dc:	6013      	str	r3, [r2, #0]
        break;
 80005de:	e022      	b.n	8000626 <NVIC_ENABLE+0xba>
    case 2:
        NVIC_EXTI2_EN;
 80005e0:	4b13      	ldr	r3, [pc, #76]	; (8000630 <NVIC_ENABLE+0xc4>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a12      	ldr	r2, [pc, #72]	; (8000630 <NVIC_ENABLE+0xc4>)
 80005e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ea:	6013      	str	r3, [r2, #0]
        break;
 80005ec:	e01b      	b.n	8000626 <NVIC_ENABLE+0xba>
    case 3:
        NVIC_EXTI3_EN;
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <NVIC_ENABLE+0xc4>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a0f      	ldr	r2, [pc, #60]	; (8000630 <NVIC_ENABLE+0xc4>)
 80005f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005f8:	6013      	str	r3, [r2, #0]
        break;
 80005fa:	e014      	b.n	8000626 <NVIC_ENABLE+0xba>
    case 4:
        NVIC_EXTI4_EN;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <NVIC_ENABLE+0xc4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <NVIC_ENABLE+0xc4>)
 8000602:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000606:	6013      	str	r3, [r2, #0]
        break;
 8000608:	e00d      	b.n	8000626 <NVIC_ENABLE+0xba>
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
        NVIC_EXTI9_EN;
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <NVIC_ENABLE+0xc4>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a08      	ldr	r2, [pc, #32]	; (8000630 <NVIC_ENABLE+0xc4>)
 8000610:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000614:	6013      	str	r3, [r2, #0]
        break;
 8000616:	e006      	b.n	8000626 <NVIC_ENABLE+0xba>
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
        NVIC_EXTI15_EN;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <NVIC_ENABLE+0xc8>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a05      	ldr	r2, [pc, #20]	; (8000634 <NVIC_ENABLE+0xc8>)
 800061e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000622:	6013      	str	r3, [r2, #0]
        break;
 8000624:	bf00      	nop

    }
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	e000e100 	.word	0xe000e100
 8000634:	e000e104 	.word	0xe000e104

08000638 <NVIC_DISABLE>:

void NVIC_DISABLE(uint8_t irq)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
    switch(irq)
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b0f      	cmp	r3, #15
 8000646:	d854      	bhi.n	80006f2 <NVIC_DISABLE+0xba>
 8000648:	a201      	add	r2, pc, #4	; (adr r2, 8000650 <NVIC_DISABLE+0x18>)
 800064a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064e:	bf00      	nop
 8000650:	08000691 	.word	0x08000691
 8000654:	0800069f 	.word	0x0800069f
 8000658:	080006ad 	.word	0x080006ad
 800065c:	080006bb 	.word	0x080006bb
 8000660:	080006c9 	.word	0x080006c9
 8000664:	080006d7 	.word	0x080006d7
 8000668:	080006d7 	.word	0x080006d7
 800066c:	080006d7 	.word	0x080006d7
 8000670:	080006d7 	.word	0x080006d7
 8000674:	080006d7 	.word	0x080006d7
 8000678:	080006e5 	.word	0x080006e5
 800067c:	080006e5 	.word	0x080006e5
 8000680:	080006e5 	.word	0x080006e5
 8000684:	080006e5 	.word	0x080006e5
 8000688:	080006e5 	.word	0x080006e5
 800068c:	080006e5 	.word	0x080006e5
    {
    case 0:
        NVIC_EXTI0_D;
 8000690:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <NVIC_DISABLE+0xc4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a19      	ldr	r2, [pc, #100]	; (80006fc <NVIC_DISABLE+0xc4>)
 8000696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800069a:	6013      	str	r3, [r2, #0]
        break;
 800069c:	e029      	b.n	80006f2 <NVIC_DISABLE+0xba>
    case 1:
        NVIC_EXTI1_D;
 800069e:	4b17      	ldr	r3, [pc, #92]	; (80006fc <NVIC_DISABLE+0xc4>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a16      	ldr	r2, [pc, #88]	; (80006fc <NVIC_DISABLE+0xc4>)
 80006a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006a8:	6013      	str	r3, [r2, #0]
        break;
 80006aa:	e022      	b.n	80006f2 <NVIC_DISABLE+0xba>
    case 2:
        NVIC_EXTI2_D;
 80006ac:	4b13      	ldr	r3, [pc, #76]	; (80006fc <NVIC_DISABLE+0xc4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a12      	ldr	r2, [pc, #72]	; (80006fc <NVIC_DISABLE+0xc4>)
 80006b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006b6:	6013      	str	r3, [r2, #0]
        break;
 80006b8:	e01b      	b.n	80006f2 <NVIC_DISABLE+0xba>
    case 3:
        NVIC_EXTI3_D;
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <NVIC_DISABLE+0xc4>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a0f      	ldr	r2, [pc, #60]	; (80006fc <NVIC_DISABLE+0xc4>)
 80006c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80006c4:	6013      	str	r3, [r2, #0]
        break;
 80006c6:	e014      	b.n	80006f2 <NVIC_DISABLE+0xba>
    case 4:
        NVIC_EXTI4_D;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <NVIC_DISABLE+0xc4>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a0b      	ldr	r2, [pc, #44]	; (80006fc <NVIC_DISABLE+0xc4>)
 80006ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80006d2:	6013      	str	r3, [r2, #0]
        break;
 80006d4:	e00d      	b.n	80006f2 <NVIC_DISABLE+0xba>
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
        NVIC_EXTI9_D;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <NVIC_DISABLE+0xc4>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a08      	ldr	r2, [pc, #32]	; (80006fc <NVIC_DISABLE+0xc4>)
 80006dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80006e0:	6013      	str	r3, [r2, #0]
        break;
 80006e2:	e006      	b.n	80006f2 <NVIC_DISABLE+0xba>
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
        NVIC_EXTI15_D;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <NVIC_DISABLE+0xc8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a05      	ldr	r2, [pc, #20]	; (8000700 <NVIC_DISABLE+0xc8>)
 80006ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006ee:	6013      	str	r3, [r2, #0]
        break;
 80006f0:	bf00      	nop
    }
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	e000e100 	.word	0xe000e100
 8000700:	e000e104 	.word	0xe000e104

08000704 <MCAL_EXTI_init>:

void MCAL_EXTI_init(EXTI_config_t *EXTI)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
    RCC->APB2ENR |=(1<<0);
 800070c:	4b65      	ldr	r3, [pc, #404]	; (80008a4 <MCAL_EXTI_init+0x1a0>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a64      	ldr	r2, [pc, #400]	; (80008a4 <MCAL_EXTI_init+0x1a0>)
 8000712:	f043 0301 	orr.w	r3, r3, #1
 8000716:	6193      	str	r3, [r2, #24]
    uint8_t AFIO_EXTICR = (EXTI->EXTI_PIN.EXI_LINE /4);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	881b      	ldrh	r3, [r3, #0]
 800071c:	089b      	lsrs	r3, r3, #2
 800071e:	b29b      	uxth	r3, r3
 8000720:	73fb      	strb	r3, [r7, #15]
    uint8_t EXTI_position = (EXTI->EXTI_PIN.EXI_LINE %4)*4;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	b2db      	uxtb	r3, r3
 8000728:	f003 0303 	and.w	r3, r3, #3
 800072c:	b2db      	uxtb	r3, r3
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	73bb      	strb	r3, [r7, #14]

    // MAKE THE PIN INPUT FLOATING
    PIN_config pin= {EXTI->EXTI_PIN.PIN,INPUT_FI};
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	891b      	ldrh	r3, [r3, #8]
 800073a:	813b      	strh	r3, [r7, #8]
 800073c:	2301      	movs	r3, #1
 800073e:	72bb      	strb	r3, [r7, #10]
    MCAL_GPIO_init(EXTI->EXTI_PIN.GIPO, &pin);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	f107 0208 	add.w	r2, r7, #8
 8000748:	4611      	mov	r1, r2
 800074a:	4618      	mov	r0, r3
 800074c:	f000 f9e4 	bl	8000b18 <MCAL_GPIO_init>

    //MAKE THE SIGNAL RISING OR FALLING OR BOTH
    if(EXTI->EXT_TRIGGER ==FALLING)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	7b1b      	ldrb	r3, [r3, #12]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d10b      	bne.n	8000770 <MCAL_EXTI_init+0x6c>
    {
        EXTI_REG->FTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 8000758:	4b53      	ldr	r3, [pc, #332]	; (80008a8 <MCAL_EXTI_init+0x1a4>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	8812      	ldrh	r2, [r2, #0]
 8000760:	4611      	mov	r1, r2
 8000762:	2201      	movs	r2, #1
 8000764:	408a      	lsls	r2, r1
 8000766:	4611      	mov	r1, r2
 8000768:	4a4f      	ldr	r2, [pc, #316]	; (80008a8 <MCAL_EXTI_init+0x1a4>)
 800076a:	430b      	orrs	r3, r1
 800076c:	60d3      	str	r3, [r2, #12]
 800076e:	e029      	b.n	80007c4 <MCAL_EXTI_init+0xc0>
    }
    else if(EXTI->EXT_TRIGGER ==RISEING)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	7b1b      	ldrb	r3, [r3, #12]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d10b      	bne.n	8000790 <MCAL_EXTI_init+0x8c>
    {
        EXTI_REG->RTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 8000778:	4b4b      	ldr	r3, [pc, #300]	; (80008a8 <MCAL_EXTI_init+0x1a4>)
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	8812      	ldrh	r2, [r2, #0]
 8000780:	4611      	mov	r1, r2
 8000782:	2201      	movs	r2, #1
 8000784:	408a      	lsls	r2, r1
 8000786:	4611      	mov	r1, r2
 8000788:	4a47      	ldr	r2, [pc, #284]	; (80008a8 <MCAL_EXTI_init+0x1a4>)
 800078a:	430b      	orrs	r3, r1
 800078c:	6093      	str	r3, [r2, #8]
 800078e:	e019      	b.n	80007c4 <MCAL_EXTI_init+0xc0>
    }
    else if(EXTI->EXT_TRIGGER ==FALLING_RISEING)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	7b1b      	ldrb	r3, [r3, #12]
 8000794:	2b02      	cmp	r3, #2
 8000796:	d115      	bne.n	80007c4 <MCAL_EXTI_init+0xc0>
    {
        EXTI_REG->FTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 8000798:	4b43      	ldr	r3, [pc, #268]	; (80008a8 <MCAL_EXTI_init+0x1a4>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	8812      	ldrh	r2, [r2, #0]
 80007a0:	4611      	mov	r1, r2
 80007a2:	2201      	movs	r2, #1
 80007a4:	408a      	lsls	r2, r1
 80007a6:	4611      	mov	r1, r2
 80007a8:	4a3f      	ldr	r2, [pc, #252]	; (80008a8 <MCAL_EXTI_init+0x1a4>)
 80007aa:	430b      	orrs	r3, r1
 80007ac:	60d3      	str	r3, [r2, #12]
        EXTI_REG->RTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 80007ae:	4b3e      	ldr	r3, [pc, #248]	; (80008a8 <MCAL_EXTI_init+0x1a4>)
 80007b0:	689b      	ldr	r3, [r3, #8]
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	8812      	ldrh	r2, [r2, #0]
 80007b6:	4611      	mov	r1, r2
 80007b8:	2201      	movs	r2, #1
 80007ba:	408a      	lsls	r2, r1
 80007bc:	4611      	mov	r1, r2
 80007be:	4a3a      	ldr	r2, [pc, #232]	; (80008a8 <MCAL_EXTI_init+0x1a4>)
 80007c0:	430b      	orrs	r3, r1
 80007c2:	6093      	str	r3, [r2, #8]
    }
    //UPDATE THE ALTERNATIVE FUNC
    AFIO->EXTICR[AFIO_EXTICR] &=~(0xF <<EXTI_position);
 80007c4:	4a39      	ldr	r2, [pc, #228]	; (80008ac <MCAL_EXTI_init+0x1a8>)
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
 80007c8:	3302      	adds	r3, #2
 80007ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007ce:	7bbb      	ldrb	r3, [r7, #14]
 80007d0:	210f      	movs	r1, #15
 80007d2:	fa01 f303 	lsl.w	r3, r1, r3
 80007d6:	43db      	mvns	r3, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	4934      	ldr	r1, [pc, #208]	; (80008ac <MCAL_EXTI_init+0x1a8>)
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	4002      	ands	r2, r0
 80007e0:	3302      	adds	r3, #2
 80007e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    AFIO->EXTICR[AFIO_EXTICR] |=(PORT_Detector(EXTI->EXTI_PIN.GIPO)<<EXTI_position);
 80007e6:	4a31      	ldr	r2, [pc, #196]	; (80008ac <MCAL_EXTI_init+0x1a8>)
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	3302      	adds	r3, #2
 80007ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	492e      	ldr	r1, [pc, #184]	; (80008b0 <MCAL_EXTI_init+0x1ac>)
 80007f6:	428b      	cmp	r3, r1
 80007f8:	d016      	beq.n	8000828 <MCAL_EXTI_init+0x124>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	492d      	ldr	r1, [pc, #180]	; (80008b4 <MCAL_EXTI_init+0x1b0>)
 8000800:	428b      	cmp	r3, r1
 8000802:	d00f      	beq.n	8000824 <MCAL_EXTI_init+0x120>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	492b      	ldr	r1, [pc, #172]	; (80008b8 <MCAL_EXTI_init+0x1b4>)
 800080a:	428b      	cmp	r3, r1
 800080c:	d008      	beq.n	8000820 <MCAL_EXTI_init+0x11c>
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	492a      	ldr	r1, [pc, #168]	; (80008bc <MCAL_EXTI_init+0x1b8>)
 8000814:	428b      	cmp	r3, r1
 8000816:	d101      	bne.n	800081c <MCAL_EXTI_init+0x118>
 8000818:	2304      	movs	r3, #4
 800081a:	e006      	b.n	800082a <MCAL_EXTI_init+0x126>
 800081c:	2300      	movs	r3, #0
 800081e:	e004      	b.n	800082a <MCAL_EXTI_init+0x126>
 8000820:	2303      	movs	r3, #3
 8000822:	e002      	b.n	800082a <MCAL_EXTI_init+0x126>
 8000824:	2301      	movs	r3, #1
 8000826:	e000      	b.n	800082a <MCAL_EXTI_init+0x126>
 8000828:	2300      	movs	r3, #0
 800082a:	7bb9      	ldrb	r1, [r7, #14]
 800082c:	408b      	lsls	r3, r1
 800082e:	4618      	mov	r0, r3
 8000830:	491e      	ldr	r1, [pc, #120]	; (80008ac <MCAL_EXTI_init+0x1a8>)
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	4302      	orrs	r2, r0
 8000836:	3302      	adds	r3, #2
 8000838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    //Update Call Back Func
    g_P_CALLBACK_f[EXTI->EXTI_PIN.EXI_LINE]=EXTI->P_CallBack;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	4619      	mov	r1, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	691b      	ldr	r3, [r3, #16]
 8000846:	4a1e      	ldr	r2, [pc, #120]	; (80008c0 <MCAL_EXTI_init+0x1bc>)
 8000848:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    //ENABLE THE Interrupt MASK AND NVIC
    if(EXTI->EXT_EN ==ENABLE)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	7b5b      	ldrb	r3, [r3, #13]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d111      	bne.n	8000878 <MCAL_EXTI_init+0x174>
    {
        EXTI_REG->IMR|=(1<<EXTI->EXTI_PIN.EXI_LINE);
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MCAL_EXTI_init+0x1a4>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	8812      	ldrh	r2, [r2, #0]
 800085c:	4611      	mov	r1, r2
 800085e:	2201      	movs	r2, #1
 8000860:	408a      	lsls	r2, r1
 8000862:	4611      	mov	r1, r2
 8000864:	4a10      	ldr	r2, [pc, #64]	; (80008a8 <MCAL_EXTI_init+0x1a4>)
 8000866:	430b      	orrs	r3, r1
 8000868:	6013      	str	r3, [r2, #0]
        NVIC_ENABLE(EXTI->EXTI_PIN.EXI_LINE);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fe7b 	bl	800056c <NVIC_ENABLE>
    else
    {
        EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
        NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
    }
}
 8000876:	e011      	b.n	800089c <MCAL_EXTI_init+0x198>
        EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
 8000878:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <MCAL_EXTI_init+0x1a4>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	8812      	ldrh	r2, [r2, #0]
 8000880:	4611      	mov	r1, r2
 8000882:	2201      	movs	r2, #1
 8000884:	408a      	lsls	r2, r1
 8000886:	43d2      	mvns	r2, r2
 8000888:	4611      	mov	r1, r2
 800088a:	4a07      	ldr	r2, [pc, #28]	; (80008a8 <MCAL_EXTI_init+0x1a4>)
 800088c:	400b      	ands	r3, r1
 800088e:	6013      	str	r3, [r2, #0]
        NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	b2db      	uxtb	r3, r3
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fece 	bl	8000638 <NVIC_DISABLE>
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40021000 	.word	0x40021000
 80008a8:	40010400 	.word	0x40010400
 80008ac:	40010000 	.word	0x40010000
 80008b0:	40010800 	.word	0x40010800
 80008b4:	40010c00 	.word	0x40010c00
 80008b8:	40011000 	.word	0x40011000
 80008bc:	40011400 	.word	0x40011400
 80008c0:	20000234 	.word	0x20000234

080008c4 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
    g_P_CALLBACK_f[0]();
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <EXTI0_IRQHandler+0x1c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4798      	blx	r3
    EXTI_REG->PR|=(1<<0);
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <EXTI0_IRQHandler+0x20>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <EXTI0_IRQHandler+0x20>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6153      	str	r3, [r2, #20]
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000234 	.word	0x20000234
 80008e4:	40010400 	.word	0x40010400

080008e8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler()
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
    g_P_CALLBACK_f[1]();
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <EXTI1_IRQHandler+0x1c>)
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	4798      	blx	r3
    EXTI_REG->PR|=(1<<1);
 80008f2:	4b05      	ldr	r3, [pc, #20]	; (8000908 <EXTI1_IRQHandler+0x20>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	4a04      	ldr	r2, [pc, #16]	; (8000908 <EXTI1_IRQHandler+0x20>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6153      	str	r3, [r2, #20]
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000234 	.word	0x20000234
 8000908:	40010400 	.word	0x40010400

0800090c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler()
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
    g_P_CALLBACK_f[2]();
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <EXTI2_IRQHandler+0x1c>)
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	4798      	blx	r3
    EXTI_REG->PR|=(1<<2);
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <EXTI2_IRQHandler+0x20>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	4a04      	ldr	r2, [pc, #16]	; (800092c <EXTI2_IRQHandler+0x20>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	6153      	str	r3, [r2, #20]
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000234 	.word	0x20000234
 800092c:	40010400 	.word	0x40010400

08000930 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler()
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
    g_P_CALLBACK_f[3]();
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <EXTI3_IRQHandler+0x1c>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	4798      	blx	r3
    EXTI_REG->PR|=(1<<3);
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <EXTI3_IRQHandler+0x20>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	4a04      	ldr	r2, [pc, #16]	; (8000950 <EXTI3_IRQHandler+0x20>)
 8000940:	f043 0308 	orr.w	r3, r3, #8
 8000944:	6153      	str	r3, [r2, #20]
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000234 	.word	0x20000234
 8000950:	40010400 	.word	0x40010400

08000954 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler()
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
    g_P_CALLBACK_f[4]();
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <EXTI4_IRQHandler+0x1c>)
 800095a:	691b      	ldr	r3, [r3, #16]
 800095c:	4798      	blx	r3
    EXTI_REG->PR|=(1<<4);
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <EXTI4_IRQHandler+0x20>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	4a04      	ldr	r2, [pc, #16]	; (8000974 <EXTI4_IRQHandler+0x20>)
 8000964:	f043 0310 	orr.w	r3, r3, #16
 8000968:	6153      	str	r3, [r2, #20]
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000234 	.word	0x20000234
 8000974:	40010400 	.word	0x40010400

08000978 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler()
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
    if(EXTI_REG->PR &(1<<5))
 800097c:	4b26      	ldr	r3, [pc, #152]	; (8000a18 <EXTI9_5_IRQHandler+0xa0>)
 800097e:	695b      	ldr	r3, [r3, #20]
 8000980:	f003 0320 	and.w	r3, r3, #32
 8000984:	2b00      	cmp	r3, #0
 8000986:	d008      	beq.n	800099a <EXTI9_5_IRQHandler+0x22>
    {
        EXTI_REG->PR|=(1<<5);
 8000988:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <EXTI9_5_IRQHandler+0xa0>)
 800098a:	695b      	ldr	r3, [r3, #20]
 800098c:	4a22      	ldr	r2, [pc, #136]	; (8000a18 <EXTI9_5_IRQHandler+0xa0>)
 800098e:	f043 0320 	orr.w	r3, r3, #32
 8000992:	6153      	str	r3, [r2, #20]
        g_P_CALLBACK_f[5]();
 8000994:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <EXTI9_5_IRQHandler+0xa4>)
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	4798      	blx	r3
    }
    if(EXTI_REG->PR &(1<<6))
 800099a:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <EXTI9_5_IRQHandler+0xa0>)
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d008      	beq.n	80009b8 <EXTI9_5_IRQHandler+0x40>
    {
        EXTI_REG->PR|=(1<<6);
 80009a6:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <EXTI9_5_IRQHandler+0xa0>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	4a1b      	ldr	r2, [pc, #108]	; (8000a18 <EXTI9_5_IRQHandler+0xa0>)
 80009ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b0:	6153      	str	r3, [r2, #20]
        g_P_CALLBACK_f[6]();
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <EXTI9_5_IRQHandler+0xa4>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	4798      	blx	r3
    }
    if(EXTI_REG->PR &(1<<7))
 80009b8:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <EXTI9_5_IRQHandler+0xa0>)
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d008      	beq.n	80009d6 <EXTI9_5_IRQHandler+0x5e>
    {
        EXTI_REG->PR|=(1<<7);
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <EXTI9_5_IRQHandler+0xa0>)
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	4a13      	ldr	r2, [pc, #76]	; (8000a18 <EXTI9_5_IRQHandler+0xa0>)
 80009ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ce:	6153      	str	r3, [r2, #20]
        g_P_CALLBACK_f[7]();
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <EXTI9_5_IRQHandler+0xa4>)
 80009d2:	69db      	ldr	r3, [r3, #28]
 80009d4:	4798      	blx	r3
    }
    if(EXTI_REG->PR &(1<<8))
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <EXTI9_5_IRQHandler+0xa0>)
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d008      	beq.n	80009f4 <EXTI9_5_IRQHandler+0x7c>
    {
        EXTI_REG->PR|=(1<<8);
 80009e2:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <EXTI9_5_IRQHandler+0xa0>)
 80009e4:	695b      	ldr	r3, [r3, #20]
 80009e6:	4a0c      	ldr	r2, [pc, #48]	; (8000a18 <EXTI9_5_IRQHandler+0xa0>)
 80009e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ec:	6153      	str	r3, [r2, #20]
        g_P_CALLBACK_f[8]();
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <EXTI9_5_IRQHandler+0xa4>)
 80009f0:	6a1b      	ldr	r3, [r3, #32]
 80009f2:	4798      	blx	r3
    }
    if(EXTI_REG->PR &(1<<9))
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <EXTI9_5_IRQHandler+0xa0>)
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d008      	beq.n	8000a12 <EXTI9_5_IRQHandler+0x9a>
    {
        EXTI_REG->PR|=(1<<9);
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <EXTI9_5_IRQHandler+0xa0>)
 8000a02:	695b      	ldr	r3, [r3, #20]
 8000a04:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <EXTI9_5_IRQHandler+0xa0>)
 8000a06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a0a:	6153      	str	r3, [r2, #20]
        g_P_CALLBACK_f[9]();
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <EXTI9_5_IRQHandler+0xa4>)
 8000a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a10:	4798      	blx	r3
    }
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40010400 	.word	0x40010400
 8000a1c:	20000234 	.word	0x20000234

08000a20 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler()
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
    if(EXTI_REG->PR &(1<<10))
 8000a24:	4b2d      	ldr	r3, [pc, #180]	; (8000adc <EXTI15_10_IRQHandler+0xbc>)
 8000a26:	695b      	ldr	r3, [r3, #20]
 8000a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d008      	beq.n	8000a42 <EXTI15_10_IRQHandler+0x22>
    {
        EXTI_REG->PR|=(1<<10);
 8000a30:	4b2a      	ldr	r3, [pc, #168]	; (8000adc <EXTI15_10_IRQHandler+0xbc>)
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	4a29      	ldr	r2, [pc, #164]	; (8000adc <EXTI15_10_IRQHandler+0xbc>)
 8000a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a3a:	6153      	str	r3, [r2, #20]
        g_P_CALLBACK_f[10]();
 8000a3c:	4b28      	ldr	r3, [pc, #160]	; (8000ae0 <EXTI15_10_IRQHandler+0xc0>)
 8000a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a40:	4798      	blx	r3
    }
    if(EXTI_REG->PR &(1<<11))
 8000a42:	4b26      	ldr	r3, [pc, #152]	; (8000adc <EXTI15_10_IRQHandler+0xbc>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d008      	beq.n	8000a60 <EXTI15_10_IRQHandler+0x40>
    {
        EXTI_REG->PR|=(1<<11);
 8000a4e:	4b23      	ldr	r3, [pc, #140]	; (8000adc <EXTI15_10_IRQHandler+0xbc>)
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	4a22      	ldr	r2, [pc, #136]	; (8000adc <EXTI15_10_IRQHandler+0xbc>)
 8000a54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a58:	6153      	str	r3, [r2, #20]
        g_P_CALLBACK_f[11]();
 8000a5a:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <EXTI15_10_IRQHandler+0xc0>)
 8000a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5e:	4798      	blx	r3
    }
    if(EXTI_REG->PR &(1<<12))
 8000a60:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <EXTI15_10_IRQHandler+0xbc>)
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d008      	beq.n	8000a7e <EXTI15_10_IRQHandler+0x5e>
    {
        EXTI_REG->PR|=(1<<12);
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <EXTI15_10_IRQHandler+0xbc>)
 8000a6e:	695b      	ldr	r3, [r3, #20]
 8000a70:	4a1a      	ldr	r2, [pc, #104]	; (8000adc <EXTI15_10_IRQHandler+0xbc>)
 8000a72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a76:	6153      	str	r3, [r2, #20]
        g_P_CALLBACK_f[12]();
 8000a78:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <EXTI15_10_IRQHandler+0xc0>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7c:	4798      	blx	r3
    }
    if(EXTI_REG->PR &(1<<13))
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <EXTI15_10_IRQHandler+0xbc>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d008      	beq.n	8000a9c <EXTI15_10_IRQHandler+0x7c>
    {
        EXTI_REG->PR|=(1<<13);
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <EXTI15_10_IRQHandler+0xbc>)
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	4a13      	ldr	r2, [pc, #76]	; (8000adc <EXTI15_10_IRQHandler+0xbc>)
 8000a90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a94:	6153      	str	r3, [r2, #20]
        g_P_CALLBACK_f[13]();
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <EXTI15_10_IRQHandler+0xc0>)
 8000a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a9a:	4798      	blx	r3
    }
    if(EXTI_REG->PR &(1<<14))
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <EXTI15_10_IRQHandler+0xbc>)
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d008      	beq.n	8000aba <EXTI15_10_IRQHandler+0x9a>
    {
        EXTI_REG->PR|=(1<<14);
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <EXTI15_10_IRQHandler+0xbc>)
 8000aaa:	695b      	ldr	r3, [r3, #20]
 8000aac:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <EXTI15_10_IRQHandler+0xbc>)
 8000aae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab2:	6153      	str	r3, [r2, #20]
        g_P_CALLBACK_f[14]();
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <EXTI15_10_IRQHandler+0xc0>)
 8000ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ab8:	4798      	blx	r3
    }
    if(EXTI_REG->PR &(1<<15))
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <EXTI15_10_IRQHandler+0xbc>)
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d008      	beq.n	8000ad8 <EXTI15_10_IRQHandler+0xb8>
    {
        EXTI_REG->PR|=(1<<15);
 8000ac6:	4b05      	ldr	r3, [pc, #20]	; (8000adc <EXTI15_10_IRQHandler+0xbc>)
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	4a04      	ldr	r2, [pc, #16]	; (8000adc <EXTI15_10_IRQHandler+0xbc>)
 8000acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ad0:	6153      	str	r3, [r2, #20]
        g_P_CALLBACK_f[15]();
 8000ad2:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <EXTI15_10_IRQHandler+0xc0>)
 8000ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ad6:	4798      	blx	r3
    }
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40010400 	.word	0x40010400
 8000ae0:	20000234 	.word	0x20000234

08000ae4 <Get_PIN_Positon>:

// ==================================================================================
// ===================================== APIS =======================================
// ==================================================================================
uint16_t Get_PIN_Positon(uint16_t pin)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	80fb      	strh	r3, [r7, #6]
    uint16_t positon = (pin<8) ? (4*pin) :((pin-8)*4)   ;
 8000aee:	88fb      	ldrh	r3, [r7, #6]
 8000af0:	2b07      	cmp	r3, #7
 8000af2:	d803      	bhi.n	8000afc <Get_PIN_Positon+0x18>
 8000af4:	88fb      	ldrh	r3, [r7, #6]
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	e006      	b.n	8000b0a <Get_PIN_Positon+0x26>
 8000afc:	88fb      	ldrh	r3, [r7, #6]
 8000afe:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8000b02:	3338      	adds	r3, #56	; 0x38
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	81fb      	strh	r3, [r7, #14]
    return positon;
 8000b0c:	89fb      	ldrh	r3, [r7, #14]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr

08000b18 <MCAL_GPIO_init>:

void MCAL_GPIO_init(GPIOx_REG* GPIOx,PIN_config* PINx)
{
 8000b18:	b590      	push	{r4, r7, lr}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
    if(GPIOx ==GPIOA) RCC->APB2ENR |=(1<<2);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a6a      	ldr	r2, [pc, #424]	; (8000cd0 <MCAL_GPIO_init+0x1b8>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d106      	bne.n	8000b38 <MCAL_GPIO_init+0x20>
 8000b2a:	4b6a      	ldr	r3, [pc, #424]	; (8000cd4 <MCAL_GPIO_init+0x1bc>)
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	4a69      	ldr	r2, [pc, #420]	; (8000cd4 <MCAL_GPIO_init+0x1bc>)
 8000b30:	f043 0304 	orr.w	r3, r3, #4
 8000b34:	6193      	str	r3, [r2, #24]
 8000b36:	e02a      	b.n	8000b8e <MCAL_GPIO_init+0x76>
    else if(GPIOx ==GPIOB)RCC->APB2ENR |=(1<<3);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a67      	ldr	r2, [pc, #412]	; (8000cd8 <MCAL_GPIO_init+0x1c0>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d106      	bne.n	8000b4e <MCAL_GPIO_init+0x36>
 8000b40:	4b64      	ldr	r3, [pc, #400]	; (8000cd4 <MCAL_GPIO_init+0x1bc>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	4a63      	ldr	r2, [pc, #396]	; (8000cd4 <MCAL_GPIO_init+0x1bc>)
 8000b46:	f043 0308 	orr.w	r3, r3, #8
 8000b4a:	6193      	str	r3, [r2, #24]
 8000b4c:	e01f      	b.n	8000b8e <MCAL_GPIO_init+0x76>
    else if(GPIOx ==GPIOC)RCC->APB2ENR |=(1<<4);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a62      	ldr	r2, [pc, #392]	; (8000cdc <MCAL_GPIO_init+0x1c4>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d106      	bne.n	8000b64 <MCAL_GPIO_init+0x4c>
 8000b56:	4b5f      	ldr	r3, [pc, #380]	; (8000cd4 <MCAL_GPIO_init+0x1bc>)
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	4a5e      	ldr	r2, [pc, #376]	; (8000cd4 <MCAL_GPIO_init+0x1bc>)
 8000b5c:	f043 0310 	orr.w	r3, r3, #16
 8000b60:	6193      	str	r3, [r2, #24]
 8000b62:	e014      	b.n	8000b8e <MCAL_GPIO_init+0x76>
    else if(GPIOx ==GPIOD)RCC->APB2ENR |=(1<<5);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a5e      	ldr	r2, [pc, #376]	; (8000ce0 <MCAL_GPIO_init+0x1c8>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d106      	bne.n	8000b7a <MCAL_GPIO_init+0x62>
 8000b6c:	4b59      	ldr	r3, [pc, #356]	; (8000cd4 <MCAL_GPIO_init+0x1bc>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a58      	ldr	r2, [pc, #352]	; (8000cd4 <MCAL_GPIO_init+0x1bc>)
 8000b72:	f043 0320 	orr.w	r3, r3, #32
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	e009      	b.n	8000b8e <MCAL_GPIO_init+0x76>
    else if(GPIOx ==GPIOE)RCC->APB2ENR |=(1<<6);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a59      	ldr	r2, [pc, #356]	; (8000ce4 <MCAL_GPIO_init+0x1cc>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d105      	bne.n	8000b8e <MCAL_GPIO_init+0x76>
 8000b82:	4b54      	ldr	r3, [pc, #336]	; (8000cd4 <MCAL_GPIO_init+0x1bc>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	4a53      	ldr	r2, [pc, #332]	; (8000cd4 <MCAL_GPIO_init+0x1bc>)
 8000b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b8c:	6193      	str	r3, [r2, #24]

    vuint32_t *CONFIG=(PINx->PIN_number < 8) ? &GPIOx->CRL : &GPIOx->CRH ;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	2b07      	cmp	r3, #7
 8000b96:	d801      	bhi.n	8000b9c <MCAL_GPIO_init+0x84>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	e001      	b.n	8000ba0 <MCAL_GPIO_init+0x88>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3304      	adds	r3, #4
 8000ba0:	60fb      	str	r3, [r7, #12]
    *(CONFIG) &=~(0xF <<Get_PIN_Positon(PINx->PIN_number));
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff9b 	bl	8000ae4 <Get_PIN_Positon>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	230f      	movs	r3, #15
 8000bb4:	4093      	lsls	r3, r2
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	401a      	ands	r2, r3
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	601a      	str	r2, [r3, #0]
    // CNF0[1:0] MODE0[1:0] CLEAR

    if(PINx->MODE == Analog ||PINx->MODE == INPUT_FI ||PINx->MODE == INPUT_PU ||PINx->MODE == INPUT_PD )
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	789b      	ldrb	r3, [r3, #2]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00e      	beq.n	8000bea <MCAL_GPIO_init+0xd2>
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	789b      	ldrb	r3, [r3, #2]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d009      	beq.n	8000bea <MCAL_GPIO_init+0xd2>
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	789b      	ldrb	r3, [r3, #2]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d004      	beq.n	8000bea <MCAL_GPIO_init+0xd2>
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	789b      	ldrb	r3, [r3, #2]
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b03      	cmp	r3, #3
 8000be8:	d156      	bne.n	8000c98 <MCAL_GPIO_init+0x180>
    {
        if(PINx->MODE == INPUT_PD)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	789b      	ldrb	r3, [r3, #2]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	2b03      	cmp	r3, #3
 8000bf2:	d11c      	bne.n	8000c2e <MCAL_GPIO_init+0x116>
        {
            *(CONFIG) |=((INPUT_PU << 2 ) << Get_PIN_Positon(PINx->PIN_number) );
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ff72 	bl	8000ae4 <Get_PIN_Positon>
 8000c00:	4603      	mov	r3, r0
 8000c02:	461a      	mov	r2, r3
 8000c04:	2308      	movs	r3, #8
 8000c06:	fa03 f202 	lsl.w	r2, r3, r2
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	431a      	orrs	r2, r3
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	601a      	str	r2, [r3, #0]
            GPIOx->ODR &=~(1<< PINx->PIN_number);;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	4093      	lsls	r3, r2
 8000c20:	43da      	mvns	r2, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	401a      	ands	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	60da      	str	r2, [r3, #12]
        if(PINx->MODE == INPUT_PD)
 8000c2c:	e04c      	b.n	8000cc8 <MCAL_GPIO_init+0x1b0>
        }
        else if(PINx->MODE == INPUT_PU)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	789b      	ldrb	r3, [r3, #2]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d11c      	bne.n	8000c72 <MCAL_GPIO_init+0x15a>
        {
            *(CONFIG) |=((INPUT_PU << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff ff50 	bl	8000ae4 <Get_PIN_Positon>
 8000c44:	4603      	mov	r3, r0
 8000c46:	461a      	mov	r2, r3
 8000c48:	2308      	movs	r3, #8
 8000c4a:	fa03 f202 	lsl.w	r2, r3, r2
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	431a      	orrs	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	601a      	str	r2, [r3, #0]
            GPIOx->ODR |=(1<< PINx->PIN_number);;
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	461a      	mov	r2, r3
 8000c60:	2301      	movs	r3, #1
 8000c62:	fa03 f202 	lsl.w	r2, r3, r2
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	60da      	str	r2, [r3, #12]
        if(PINx->MODE == INPUT_PD)
 8000c70:	e02a      	b.n	8000cc8 <MCAL_GPIO_init+0x1b0>
        }
        else
        {
            *(CONFIG) |=((PINx->MODE << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	789b      	ldrb	r3, [r3, #2]
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	009c      	lsls	r4, r3, #2
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff2f 	bl	8000ae4 <Get_PIN_Positon>
 8000c86:	4603      	mov	r3, r0
 8000c88:	fa04 f203 	lsl.w	r2, r4, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	431a      	orrs	r2, r3
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	601a      	str	r2, [r3, #0]
        if(PINx->MODE == INPUT_PD)
 8000c96:	e017      	b.n	8000cc8 <MCAL_GPIO_init+0x1b0>
        }
    }
    else
    {
        *(CONFIG) |=((((PINx->MODE -4 ) <<2) | PINx->SPEED ) << Get_PIN_Positon(PINx->PIN_number) );
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	789b      	ldrb	r3, [r3, #2]
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	3b04      	subs	r3, #4
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	683a      	ldr	r2, [r7, #0]
 8000ca4:	78d2      	ldrb	r2, [r2, #3]
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	ea43 0402 	orr.w	r4, r3, r2
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff16 	bl	8000ae4 <Get_PIN_Positon>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	fa04 f203 	lsl.w	r2, r4, r3
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	601a      	str	r2, [r3, #0]
    }
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd90      	pop	{r4, r7, pc}
 8000cd0:	40010800 	.word	0x40010800
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40010c00 	.word	0x40010c00
 8000cdc:	40011000 	.word	0x40011000
 8000ce0:	40011400 	.word	0x40011400
 8000ce4:	40011800 	.word	0x40011800

08000ce8 <MCAL_write_PIN>:
        RCC->APB2RSTR &=~(1<<6);
    }
}

void MCAL_write_PIN(GPIOx_REG* GPIOx,vuint16_t PIN_Number,vuint8_t value)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	807b      	strh	r3, [r7, #2]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	707b      	strb	r3, [r7, #1]
    if(value == LOGIC_HIGH)
 8000cf8:	787b      	ldrb	r3, [r7, #1]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d10b      	bne.n	8000d18 <MCAL_write_PIN+0x30>
    {
        GPIOx->ODR |=(1<<PIN_Number);
 8000d00:	887b      	ldrh	r3, [r7, #2]
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	461a      	mov	r2, r3
 8000d06:	2301      	movs	r3, #1
 8000d08:	fa03 f202 	lsl.w	r2, r3, r2
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	431a      	orrs	r2, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	60da      	str	r2, [r3, #12]
    }
    else
    {
        GPIOx->ODR &=~(1<<PIN_Number);
    }
}
 8000d16:	e00a      	b.n	8000d2e <MCAL_write_PIN+0x46>
        GPIOx->ODR &=~(1<<PIN_Number);
 8000d18:	887b      	ldrh	r3, [r7, #2]
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	2301      	movs	r3, #1
 8000d20:	4093      	lsls	r3, r2
 8000d22:	43da      	mvns	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	401a      	ands	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	60da      	str	r2, [r3, #12]
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <MCAL_Read_PIN>:
{
    GPIOX->ODR=value;
}

uint16_t MCAL_Read_PIN(GPIOx_REG* GPIOx,vuint16_t PIN_Number)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	807b      	strh	r3, [r7, #2]
    return ((GPIOx->IDR>>PIN_Number) & 1);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	887a      	ldrh	r2, [r7, #2]
 8000d4a:	b292      	uxth	r2, r2
 8000d4c:	40d3      	lsrs	r3, r2
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	b29b      	uxth	r3, r3
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <TIM2_IRQHandler>:
        RCC->APB1RSTR&=~(1<<2);
    }
}

void TIM2_IRQHandler()
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
    GP_TIMx_ERROR_src *ERROR;
    if(TIM2->SR.BIT_NAME.UIF)
 8000d66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d6a:	691b      	ldr	r3, [r3, #16]
 8000d6c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d00b      	beq.n	8000d8e <TIM2_IRQHandler+0x2e>
    {
        ERROR->UIF=1;
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	7813      	ldrb	r3, [r2, #0]
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	7013      	strb	r3, [r2, #0]
        TIM2->SR.BIT_NAME.UIF=0;
 8000d80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d84:	6913      	ldr	r3, [r2, #16]
 8000d86:	f36f 0300 	bfc	r3, #0, #1
 8000d8a:	6113      	str	r3, [r2, #16]
 8000d8c:	e04e      	b.n	8000e2c <TIM2_IRQHandler+0xcc>
    }

    else if(TIM2->SR.BIT_NAME.CC1IF)
 8000d8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d92:	691b      	ldr	r3, [r3, #16]
 8000d94:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d00b      	beq.n	8000db6 <TIM2_IRQHandler+0x56>
    {
        ERROR->CC1IF=1;
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	7813      	ldrb	r3, [r2, #0]
 8000da2:	f043 0302 	orr.w	r3, r3, #2
 8000da6:	7013      	strb	r3, [r2, #0]
        TIM2->SR.BIT_NAME.CC1IF=0;
 8000da8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dac:	6913      	ldr	r3, [r2, #16]
 8000dae:	f36f 0341 	bfc	r3, #1, #1
 8000db2:	6113      	str	r3, [r2, #16]
 8000db4:	e03a      	b.n	8000e2c <TIM2_IRQHandler+0xcc>
    }
    else if(TIM2->SR.BIT_NAME.CC2IF)
 8000db6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dba:	691b      	ldr	r3, [r3, #16]
 8000dbc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d00b      	beq.n	8000dde <TIM2_IRQHandler+0x7e>
    {
        ERROR->CC2IF=1;
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	7813      	ldrb	r3, [r2, #0]
 8000dca:	f043 0304 	orr.w	r3, r3, #4
 8000dce:	7013      	strb	r3, [r2, #0]
        TIM2->SR.BIT_NAME.CC2IF=0;
 8000dd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dd4:	6913      	ldr	r3, [r2, #16]
 8000dd6:	f36f 0382 	bfc	r3, #2, #1
 8000dda:	6113      	str	r3, [r2, #16]
 8000ddc:	e026      	b.n	8000e2c <TIM2_IRQHandler+0xcc>
    }
    else if(TIM2->SR.BIT_NAME.CC3IF)
 8000dde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de2:	691b      	ldr	r3, [r3, #16]
 8000de4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d00b      	beq.n	8000e06 <TIM2_IRQHandler+0xa6>
    {
        ERROR->CC3IF=1;
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	7813      	ldrb	r3, [r2, #0]
 8000df2:	f043 0308 	orr.w	r3, r3, #8
 8000df6:	7013      	strb	r3, [r2, #0]
        TIM2->SR.BIT_NAME.CC3IF=0;
 8000df8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dfc:	6913      	ldr	r3, [r2, #16]
 8000dfe:	f36f 03c3 	bfc	r3, #3, #1
 8000e02:	6113      	str	r3, [r2, #16]
 8000e04:	e012      	b.n	8000e2c <TIM2_IRQHandler+0xcc>
    }
    else if(TIM2->SR.BIT_NAME.CC4IF)
 8000e06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e0a:	691b      	ldr	r3, [r3, #16]
 8000e0c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d00a      	beq.n	8000e2c <TIM2_IRQHandler+0xcc>
    {
        ERROR->CC4IF=1;
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	7813      	ldrb	r3, [r2, #0]
 8000e1a:	f043 0310 	orr.w	r3, r3, #16
 8000e1e:	7013      	strb	r3, [r2, #0]
        TIM2->SR.BIT_NAME.CC4IF=0;
 8000e20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e24:	6913      	ldr	r3, [r2, #16]
 8000e26:	f36f 1304 	bfc	r3, #4, #1
 8000e2a:	6113      	str	r3, [r2, #16]
    }
    g_GP_Sitting[0].f_callback(ERROR);
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <TIM2_IRQHandler+0xdc>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	4798      	blx	r3
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000270 	.word	0x20000270

08000e40 <TIM3_IRQHandler>:

void TIM3_IRQHandler()
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
    GP_TIMx_ERROR_src *ERROR;
    if(TIM3->SR.BIT_NAME.UIF)
 8000e46:	4b30      	ldr	r3, [pc, #192]	; (8000f08 <TIM3_IRQHandler+0xc8>)
 8000e48:	691b      	ldr	r3, [r3, #16]
 8000e4a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d00a      	beq.n	8000e6a <TIM3_IRQHandler+0x2a>
    {
        ERROR->UIF=1;
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	7813      	ldrb	r3, [r2, #0]
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	7013      	strb	r3, [r2, #0]
        TIM3->SR.BIT_NAME.UIF=0;
 8000e5e:	4a2a      	ldr	r2, [pc, #168]	; (8000f08 <TIM3_IRQHandler+0xc8>)
 8000e60:	6913      	ldr	r3, [r2, #16]
 8000e62:	f36f 0300 	bfc	r3, #0, #1
 8000e66:	6113      	str	r3, [r2, #16]
 8000e68:	e046      	b.n	8000ef8 <TIM3_IRQHandler+0xb8>
    }
    else if(TIM3->SR.BIT_NAME.CC1IF)
 8000e6a:	4b27      	ldr	r3, [pc, #156]	; (8000f08 <TIM3_IRQHandler+0xc8>)
 8000e6c:	691b      	ldr	r3, [r3, #16]
 8000e6e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d00a      	beq.n	8000e8e <TIM3_IRQHandler+0x4e>
    {
        ERROR->CC1IF=1;
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	7813      	ldrb	r3, [r2, #0]
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	7013      	strb	r3, [r2, #0]
        TIM3->SR.BIT_NAME.CC1IF=0;
 8000e82:	4a21      	ldr	r2, [pc, #132]	; (8000f08 <TIM3_IRQHandler+0xc8>)
 8000e84:	6913      	ldr	r3, [r2, #16]
 8000e86:	f36f 0341 	bfc	r3, #1, #1
 8000e8a:	6113      	str	r3, [r2, #16]
 8000e8c:	e034      	b.n	8000ef8 <TIM3_IRQHandler+0xb8>
    }
    else if(TIM3->SR.BIT_NAME.CC2IF)
 8000e8e:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <TIM3_IRQHandler+0xc8>)
 8000e90:	691b      	ldr	r3, [r3, #16]
 8000e92:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d00a      	beq.n	8000eb2 <TIM3_IRQHandler+0x72>
    {
        ERROR->CC2IF=1;
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	7813      	ldrb	r3, [r2, #0]
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	7013      	strb	r3, [r2, #0]
        TIM3->SR.BIT_NAME.CC2IF=0;
 8000ea6:	4a18      	ldr	r2, [pc, #96]	; (8000f08 <TIM3_IRQHandler+0xc8>)
 8000ea8:	6913      	ldr	r3, [r2, #16]
 8000eaa:	f36f 0382 	bfc	r3, #2, #1
 8000eae:	6113      	str	r3, [r2, #16]
 8000eb0:	e022      	b.n	8000ef8 <TIM3_IRQHandler+0xb8>
    }
    else if(TIM3->SR.BIT_NAME.CC3IF)
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <TIM3_IRQHandler+0xc8>)
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d00a      	beq.n	8000ed6 <TIM3_IRQHandler+0x96>
    {
        ERROR->CC3IF=1;
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	7813      	ldrb	r3, [r2, #0]
 8000ec4:	f043 0308 	orr.w	r3, r3, #8
 8000ec8:	7013      	strb	r3, [r2, #0]
        TIM3->SR.BIT_NAME.CC3IF=0;
 8000eca:	4a0f      	ldr	r2, [pc, #60]	; (8000f08 <TIM3_IRQHandler+0xc8>)
 8000ecc:	6913      	ldr	r3, [r2, #16]
 8000ece:	f36f 03c3 	bfc	r3, #3, #1
 8000ed2:	6113      	str	r3, [r2, #16]
 8000ed4:	e010      	b.n	8000ef8 <TIM3_IRQHandler+0xb8>
    }
    else if(TIM3->SR.BIT_NAME.CC4IF)
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <TIM3_IRQHandler+0xc8>)
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d009      	beq.n	8000ef8 <TIM3_IRQHandler+0xb8>
    {
        ERROR->CC4IF=1;
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	7813      	ldrb	r3, [r2, #0]
 8000ee8:	f043 0310 	orr.w	r3, r3, #16
 8000eec:	7013      	strb	r3, [r2, #0]
        TIM3->SR.BIT_NAME.CC4IF=0;
 8000eee:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <TIM3_IRQHandler+0xc8>)
 8000ef0:	6913      	ldr	r3, [r2, #16]
 8000ef2:	f36f 1304 	bfc	r3, #4, #1
 8000ef6:	6113      	str	r3, [r2, #16]
    }
    g_GP_Sitting[1].f_callback(ERROR);
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <TIM3_IRQHandler+0xcc>)
 8000efa:	69db      	ldr	r3, [r3, #28]
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	4798      	blx	r3
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40000400 	.word	0x40000400
 8000f0c:	20000270 	.word	0x20000270

08000f10 <TIM4_IRQHandler>:

void TIM4_IRQHandler()
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
    volatile  GP_TIMx_ERROR_src *ERROR;
    if(TIM4->SR.BIT_NAME.UIF)
 8000f16:	4b33      	ldr	r3, [pc, #204]	; (8000fe4 <TIM4_IRQHandler+0xd4>)
 8000f18:	691b      	ldr	r3, [r3, #16]
 8000f1a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d00a      	beq.n	8000f3a <TIM4_IRQHandler+0x2a>
    {
        ERROR->UIF=1;
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	7813      	ldrb	r3, [r2, #0]
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	7013      	strb	r3, [r2, #0]
        TIM4->SR.BIT_NAME.UIF=0;
 8000f2e:	4a2d      	ldr	r2, [pc, #180]	; (8000fe4 <TIM4_IRQHandler+0xd4>)
 8000f30:	6913      	ldr	r3, [r2, #16]
 8000f32:	f36f 0300 	bfc	r3, #0, #1
 8000f36:	6113      	str	r3, [r2, #16]
 8000f38:	e04b      	b.n	8000fd2 <TIM4_IRQHandler+0xc2>
    }
    else if(TIM4->SR.BIT_NAME.CC1IF)
 8000f3a:	4b2a      	ldr	r3, [pc, #168]	; (8000fe4 <TIM4_IRQHandler+0xd4>)
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d00a      	beq.n	8000f5e <TIM4_IRQHandler+0x4e>
    {
        ERROR->CC1IF=1;
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	7813      	ldrb	r3, [r2, #0]
 8000f4c:	f043 0302 	orr.w	r3, r3, #2
 8000f50:	7013      	strb	r3, [r2, #0]
        TIM4->SR.BIT_NAME.CC1IF=0;
 8000f52:	4a24      	ldr	r2, [pc, #144]	; (8000fe4 <TIM4_IRQHandler+0xd4>)
 8000f54:	6913      	ldr	r3, [r2, #16]
 8000f56:	f36f 0341 	bfc	r3, #1, #1
 8000f5a:	6113      	str	r3, [r2, #16]
 8000f5c:	e039      	b.n	8000fd2 <TIM4_IRQHandler+0xc2>
    }
    else if(TIM4->SR.BIT_NAME.CC2IF)
 8000f5e:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <TIM4_IRQHandler+0xd4>)
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00f      	beq.n	8000f8c <TIM4_IRQHandler+0x7c>
    {
        ERROR->CC2IF=1;
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	7813      	ldrb	r3, [r2, #0]
 8000f70:	f043 0304 	orr.w	r3, r3, #4
 8000f74:	7013      	strb	r3, [r2, #0]
        TIM4->SR.BIT_NAME.CC2IF=0;
 8000f76:	4a1b      	ldr	r2, [pc, #108]	; (8000fe4 <TIM4_IRQHandler+0xd4>)
 8000f78:	6913      	ldr	r3, [r2, #16]
 8000f7a:	f36f 0382 	bfc	r3, #2, #1
 8000f7e:	6113      	str	r3, [r2, #16]
        ERROR->UIF=1;
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	7813      	ldrb	r3, [r2, #0]
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	7013      	strb	r3, [r2, #0]
 8000f8a:	e022      	b.n	8000fd2 <TIM4_IRQHandler+0xc2>
    }
    else if(TIM4->SR.BIT_NAME.CC3IF)
 8000f8c:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <TIM4_IRQHandler+0xd4>)
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00a      	beq.n	8000fb0 <TIM4_IRQHandler+0xa0>
    {
        ERROR->CC3IF=1;
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	7813      	ldrb	r3, [r2, #0]
 8000f9e:	f043 0308 	orr.w	r3, r3, #8
 8000fa2:	7013      	strb	r3, [r2, #0]
        TIM4->SR.BIT_NAME.CC3IF=0;
 8000fa4:	4a0f      	ldr	r2, [pc, #60]	; (8000fe4 <TIM4_IRQHandler+0xd4>)
 8000fa6:	6913      	ldr	r3, [r2, #16]
 8000fa8:	f36f 03c3 	bfc	r3, #3, #1
 8000fac:	6113      	str	r3, [r2, #16]
 8000fae:	e010      	b.n	8000fd2 <TIM4_IRQHandler+0xc2>
    }
    else if(TIM4->SR.BIT_NAME.CC4IF)
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <TIM4_IRQHandler+0xd4>)
 8000fb2:	691b      	ldr	r3, [r3, #16]
 8000fb4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d009      	beq.n	8000fd2 <TIM4_IRQHandler+0xc2>
    {
        ERROR->CC4IF=1;
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	7813      	ldrb	r3, [r2, #0]
 8000fc2:	f043 0310 	orr.w	r3, r3, #16
 8000fc6:	7013      	strb	r3, [r2, #0]
        TIM4->SR.BIT_NAME.CC4IF=0;
 8000fc8:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <TIM4_IRQHandler+0xd4>)
 8000fca:	6913      	ldr	r3, [r2, #16]
 8000fcc:	f36f 1304 	bfc	r3, #4, #1
 8000fd0:	6113      	str	r3, [r2, #16]
    }
    g_GP_Sitting[2].f_callback(ERROR);
 8000fd2:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <TIM4_IRQHandler+0xd8>)
 8000fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	4798      	blx	r3
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40000800 	.word	0x40000800
 8000fe8:	20000270 	.word	0x20000270

08000fec <MCAL_GET_SYS_CLCK>:

// ==================================================================================
// ===================================== APIS =======================================
// ==================================================================================
uint32_t MCAL_GET_SYS_CLCK()
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
    switch((RCC->CFGR >>2) &0b11)
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <MCAL_GET_SYS_CLCK+0x30>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	089b      	lsrs	r3, r3, #2
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d006      	beq.n	800100c <MCAL_GET_SYS_CLCK+0x20>
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d302      	bcc.n	8001008 <MCAL_GET_SYS_CLCK+0x1c>
 8001002:	2b02      	cmp	r3, #2
 8001004:	d004      	beq.n	8001010 <MCAL_GET_SYS_CLCK+0x24>
 8001006:	e005      	b.n	8001014 <MCAL_GET_SYS_CLCK+0x28>
    {
    case 0:
        return HSI_CLOCK;
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <MCAL_GET_SYS_CLCK+0x34>)
 800100a:	e003      	b.n	8001014 <MCAL_GET_SYS_CLCK+0x28>
        break;
    case 1:
        return HSE_CLOCK;
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <MCAL_GET_SYS_CLCK+0x38>)
 800100e:	e001      	b.n	8001014 <MCAL_GET_SYS_CLCK+0x28>
        break;
    case 2:
        return PLL_CLOCK;
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <MCAL_GET_SYS_CLCK+0x3c>)
 8001012:	e7ff      	b.n	8001014 <MCAL_GET_SYS_CLCK+0x28>
        break;
    }
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	40021000 	.word	0x40021000
 8001020:	007a1200 	.word	0x007a1200
 8001024:	00f42400 	.word	0x00f42400
 8001028:	01ab3f00 	.word	0x01ab3f00

0800102c <MCAL_GET_H_CLCK>:

uint32_t MCAL_GET_H_CLCK()
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
    return (MCAL_GET_SYS_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>4) &0xF]) ;
 8001030:	f7ff ffdc 	bl	8000fec <MCAL_GET_SYS_CLCK>
 8001034:	4601      	mov	r1, r0
 8001036:	4b05      	ldr	r3, [pc, #20]	; (800104c <MCAL_GET_H_CLCK+0x20>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	091b      	lsrs	r3, r3, #4
 800103c:	f003 030f 	and.w	r3, r3, #15
 8001040:	4a03      	ldr	r2, [pc, #12]	; (8001050 <MCAL_GET_H_CLCK+0x24>)
 8001042:	5cd3      	ldrb	r3, [r2, r3]
 8001044:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001048:	4618      	mov	r0, r3
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40021000 	.word	0x40021000
 8001050:	20000008 	.word	0x20000008

08001054 <MCAL_GET_PCLCK1>:

uint32_t MCAL_GET_PCLCK1()
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
    return (MCAL_GET_H_CLCK() >> APB_Prescaler[ (RCC->CFGR >>8) &0b111] );
 8001058:	f7ff ffe8 	bl	800102c <MCAL_GET_H_CLCK>
 800105c:	4601      	mov	r1, r0
 800105e:	4b05      	ldr	r3, [pc, #20]	; (8001074 <MCAL_GET_PCLCK1+0x20>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	0a1b      	lsrs	r3, r3, #8
 8001064:	f003 0307 	and.w	r3, r3, #7
 8001068:	4a03      	ldr	r2, [pc, #12]	; (8001078 <MCAL_GET_PCLCK1+0x24>)
 800106a:	5cd3      	ldrb	r3, [r2, r3]
 800106c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001070:	4618      	mov	r0, r3
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40021000 	.word	0x40021000
 8001078:	20000000 	.word	0x20000000

0800107c <MCAL_GET_PCLCK2>:

uint32_t MCAL_GET_PCLCK2()
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
    return (MCAL_GET_H_CLCK() >> APB_Prescaler[ (RCC->CFGR >>11) &0b111] );
 8001080:	f7ff ffd4 	bl	800102c <MCAL_GET_H_CLCK>
 8001084:	4601      	mov	r1, r0
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <MCAL_GET_PCLCK2+0x20>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	0adb      	lsrs	r3, r3, #11
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	4a03      	ldr	r2, [pc, #12]	; (80010a0 <MCAL_GET_PCLCK2+0x24>)
 8001092:	5cd3      	ldrb	r3, [r2, r3]
 8001094:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001098:	4618      	mov	r0, r3
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40021000 	.word	0x40021000
 80010a0:	20000000 	.word	0x20000000

080010a4 <SPI1_IRQHandler>:
        MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
    }
}

void SPI1_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
    Flag_source flagv2;
    get_flag_source(&flagv2,SPI1);
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	4905      	ldr	r1, [pc, #20]	; (80010c4 <SPI1_IRQHandler+0x20>)
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f80c 	bl	80010cc <get_flag_source>
    G_P_Config_t[0].P_CallBack(flagv2);
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <SPI1_IRQHandler+0x24>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	7938      	ldrb	r0, [r7, #4]
 80010ba:	4798      	blx	r3
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40013000 	.word	0x40013000
 80010c8:	20000210 	.word	0x20000210

080010cc <get_flag_source>:
void get_flag_source(Flag_source *flag,SPI_Reg* SPIx)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]

    if(SPIx->SPI_SR.Bit_Name.RXNE)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d00f      	beq.n	8001104 <get_flag_source+0x38>
    {
        flag->TXE_FLAG=0;
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	7813      	ldrb	r3, [r2, #0]
 80010e8:	f36f 0300 	bfc	r3, #0, #1
 80010ec:	7013      	strb	r3, [r2, #0]
        flag->RXNE_FLAG=1;
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	7813      	ldrb	r3, [r2, #0]
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	7013      	strb	r3, [r2, #0]
        SPIx->SPI_CR2.Bit_Name.RXNEIE=0;
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	7913      	ldrb	r3, [r2, #4]
 80010fc:	f36f 1386 	bfc	r3, #6, #1
 8001100:	7113      	strb	r3, [r2, #4]
    {
        flag->TXE_FLAG=1;
        flag->RXNE_FLAG=0;
        SPIx->SPI_CR2.Bit_Name.TXEIE=0;
    }
}
 8001102:	e015      	b.n	8001130 <get_flag_source+0x64>
    else if(SPIx->SPI_SR.Bit_Name.TXE)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00e      	beq.n	8001130 <get_flag_source+0x64>
        flag->TXE_FLAG=1;
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	7813      	ldrb	r3, [r2, #0]
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	7013      	strb	r3, [r2, #0]
        flag->RXNE_FLAG=0;
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	7813      	ldrb	r3, [r2, #0]
 8001120:	f36f 0341 	bfc	r3, #1, #1
 8001124:	7013      	strb	r3, [r2, #0]
        SPIx->SPI_CR2.Bit_Name.TXEIE=0;
 8001126:	683a      	ldr	r2, [r7, #0]
 8001128:	7913      	ldrb	r3, [r2, #4]
 800112a:	f36f 13c7 	bfc	r3, #7, #1
 800112e:	7113      	strb	r3, [r2, #4]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
	...

0800113c <MCAL_SET_TIMx_GPIO>:
//void ERROR_HANDLER(){
//	while(1);
//}

void MCAL_SET_TIMx_GPIO(TIM1_8_REG* TIMx)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
    PIN_config pin= {PIN_8,OUTPUT_AF_PP,SPEED_10};
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MCAL_SET_TIMx_GPIO+0x24>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	60fb      	str	r3, [r7, #12]
    MCAL_GPIO_init(GPIOA, &pin);
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	4619      	mov	r1, r3
 8001150:	4804      	ldr	r0, [pc, #16]	; (8001164 <MCAL_SET_TIMx_GPIO+0x28>)
 8001152:	f7ff fce1 	bl	8000b18 <MCAL_GPIO_init>
}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	08001d18 	.word	0x08001d18
 8001164:	40010800 	.word	0x40010800

08001168 <TIMER_1_8_start>:

void TIMER_1_8_start(TIM1_8_REG* TIMx,TIMERx_type* Sitting)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
    g_Sitting=(* Sitting);
 8001172:	4a3b      	ldr	r2, [pc, #236]	; (8001260 <TIMER_1_8_start+0xf8>)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	4614      	mov	r4, r2
 8001178:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800117a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    g_TIMX=TIMx;
 800117e:	4a39      	ldr	r2, [pc, #228]	; (8001264 <TIMER_1_8_start+0xfc>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6013      	str	r3, [r2, #0]
    if(TIMx== TIM1) RCC->APB2ENR|=(1<<11);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a38      	ldr	r2, [pc, #224]	; (8001268 <TIMER_1_8_start+0x100>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d105      	bne.n	8001198 <TIMER_1_8_start+0x30>
 800118c:	4b37      	ldr	r3, [pc, #220]	; (800126c <TIMER_1_8_start+0x104>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a36      	ldr	r2, [pc, #216]	; (800126c <TIMER_1_8_start+0x104>)
 8001192:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001196:	6193      	str	r3, [r2, #24]

    // 2.select the pre vale
    TIMx->PSC=Sitting->TIME_PSC;
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	629a      	str	r2, [r3, #40]	; 0x28

    TIMx->CR1.BIT_NAME.ARPE=1;
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	6813      	ldr	r3, [r2, #0]
 80011a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011aa:	6013      	str	r3, [r2, #0]

    TIMx->ARR=Sitting->TIME_ARR;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	885b      	ldrh	r3, [r3, #2]
 80011b0:	461a      	mov	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	62da      	str	r2, [r3, #44]	; 0x2c

    TIMx->RCR=Sitting->TIME_RCR;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	889b      	ldrh	r3, [r3, #4]
 80011ba:	461a      	mov	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	631a      	str	r2, [r3, #48]	; 0x30
    //1.Select the mode CMS[1:0]
    switch(Sitting->mode)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	7a5b      	ldrb	r3, [r3, #9]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d00e      	beq.n	80011e6 <TIMER_1_8_start+0x7e>
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d017      	beq.n	80011fc <TIMER_1_8_start+0x94>
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d11b      	bne.n	8001208 <TIMER_1_8_start+0xa0>
    {
    case TIM1_Up:
        TIMx->CR1.BIT_NAME.CMS=0b00; //00: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6813      	ldr	r3, [r2, #0]
 80011d4:	f36f 1346 	bfc	r3, #5, #2
 80011d8:	6013      	str	r3, [r2, #0]
        TIMx->CR1.BIT_NAME.DIR=0; //0: Counter used as upcounter
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	6813      	ldr	r3, [r2, #0]
 80011de:	f36f 1304 	bfc	r3, #4, #1
 80011e2:	6013      	str	r3, [r2, #0]
        break;
 80011e4:	e013      	b.n	800120e <TIMER_1_8_start+0xa6>
    case TIM1_DOWN:
        TIMx->CR1.BIT_NAME.CMS=0b00; //00: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	6813      	ldr	r3, [r2, #0]
 80011ea:	f36f 1346 	bfc	r3, #5, #2
 80011ee:	6013      	str	r3, [r2, #0]
        TIMx->CR1.BIT_NAME.DIR=1; //1: Counter used as downcounter
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	6813      	ldr	r3, [r2, #0]
 80011f4:	f043 0310 	orr.w	r3, r3, #16
 80011f8:	6013      	str	r3, [r2, #0]
        break;
 80011fa:	e008      	b.n	800120e <TIMER_1_8_start+0xa6>
    case TIM1_Up_Down:
        TIMx->CR1.BIT_NAME.CMS=0b11;
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	6813      	ldr	r3, [r2, #0]
 8001200:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001204:	6013      	str	r3, [r2, #0]
        /*11: Center-aligned mode 3. The counter counts up and down alternatively. Output compare
        interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set
        both when the counter is counting up or down*/
        break;
 8001206:	e002      	b.n	800120e <TIMER_1_8_start+0xa6>
    default:
        ERROR_HANDLER();
 8001208:	f000 fb74 	bl	80018f4 <ERROR_HANDLER>
        break;
 800120c:	bf00      	nop
    }
    MCAL_SET_TIMx_GPIO(TIMx);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff ff94 	bl	800113c <MCAL_SET_TIMx_GPIO>
    TIMx->CR1.BIT_NAME.CEN=1;
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	6813      	ldr	r3, [r2, #0]
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6013      	str	r3, [r2, #0]

    if(Sitting->INT_EN_DIS==TIM1_INT_EN)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	7a1b      	ldrb	r3, [r3, #8]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10b      	bne.n	800123e <TIMER_1_8_start+0xd6>
    {
        TIMx->DIER.BIT_NAME.UIE=1;
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	68d3      	ldr	r3, [r2, #12]
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	60d3      	str	r3, [r2, #12]
        NVIC_ISER0|=(1<<25);
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <TIMER_1_8_start+0x108>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <TIMER_1_8_start+0x108>)
 8001236:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800123a:	6013      	str	r3, [r2, #0]
    else
    {
        while(!TIMx->SR.BIT_NAME.UIF);
        TIMx->SR.BIT_NAME.UIF=0;
    }
}
 800123c:	e00c      	b.n	8001258 <TIMER_1_8_start+0xf0>
        while(!TIMx->SR.BIT_NAME.UIF);
 800123e:	bf00      	nop
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f8      	beq.n	8001240 <TIMER_1_8_start+0xd8>
        TIMx->SR.BIT_NAME.UIF=0;
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	6913      	ldr	r3, [r2, #16]
 8001252:	f36f 0300 	bfc	r3, #0, #1
 8001256:	6113      	str	r3, [r2, #16]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bd90      	pop	{r4, r7, pc}
 8001260:	200002ac 	.word	0x200002ac
 8001264:	200002bc 	.word	0x200002bc
 8001268:	40012c00 	.word	0x40012c00
 800126c:	40021000 	.word	0x40021000
 8001270:	e000e100 	.word	0xe000e100

08001274 <TIM1_UP_IRQHandler>:
    TIM1->CR2.ALL_BITS=0;
    TIM1->PSC=0;
}

void TIM1_UP_IRQHandler()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
    g_Sitting.f_callback();
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <TIM1_UP_IRQHandler+0x1c>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	4798      	blx	r3
    g_TIMX->SR.BIT_NAME.UIF=0;
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <TIM1_UP_IRQHandler+0x20>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	6913      	ldr	r3, [r2, #16]
 8001284:	f36f 0300 	bfc	r3, #0, #1
 8001288:	6113      	str	r3, [r2, #16]
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200002ac 	.word	0x200002ac
 8001294:	200002bc 	.word	0x200002bc

08001298 <TIM1_CC_IRQHandler>:

void TIM1_CC_IRQHandler()
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
    g_Sitting.f_callback();
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <TIM1_CC_IRQHandler+0x1c>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	4798      	blx	r3
    g_TIMX->SR.BIT_NAME.CC1IF=0;
 80012a2:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <TIM1_CC_IRQHandler+0x20>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	6913      	ldr	r3, [r2, #16]
 80012a8:	f36f 0341 	bfc	r3, #1, #1
 80012ac:	6113      	str	r3, [r2, #16]
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200002ac 	.word	0x200002ac
 80012b8:	200002bc 	.word	0x200002bc

080012bc <TIM1_BRK_IRQHandler>:

void TIM1_BRK_IRQHandler()
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
    g_Sitting.f_callback();
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <TIM1_BRK_IRQHandler+0x1c>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	4798      	blx	r3
    g_TIMX->SR.BIT_NAME.UIF=0;
 80012c6:	4b05      	ldr	r3, [pc, #20]	; (80012dc <TIM1_BRK_IRQHandler+0x20>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	6913      	ldr	r3, [r2, #16]
 80012cc:	f36f 0300 	bfc	r3, #0, #1
 80012d0:	6113      	str	r3, [r2, #16]
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200002ac 	.word	0x200002ac
 80012dc:	200002bc 	.word	0x200002bc

080012e0 <TIM1_TRG_COM_IRQHandler>:
void TIM1_TRG_COM_IRQHandler()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
    g_Sitting.f_callback();
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <TIM1_TRG_COM_IRQHandler+0x1c>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	4798      	blx	r3
    g_TIMX->SR.BIT_NAME.UIF=0;
 80012ea:	4b05      	ldr	r3, [pc, #20]	; (8001300 <TIM1_TRG_COM_IRQHandler+0x20>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	6913      	ldr	r3, [r2, #16]
 80012f0:	f36f 0300 	bfc	r3, #0, #1
 80012f4:	6113      	str	r3, [r2, #16]
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200002ac 	.word	0x200002ac
 8001300:	200002bc 	.word	0x200002bc

08001304 <_TIM1_delay_us>:

void _TIM1_delay_us(uint16_t delay)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
    TIMERx_type l_t_delay= {((MCAL_GET_PCLCK2()/1000000)-1),((delay)-1),0,0,TIM1_INT_DIS,TIM1_Up,NULL};
 800130e:	f7ff feb5 	bl	800107c <MCAL_GET_PCLCK2>
 8001312:	4602      	mov	r2, r0
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <_TIM1_delay_us+0x50>)
 8001316:	fba3 2302 	umull	r2, r3, r3, r2
 800131a:	0c9b      	lsrs	r3, r3, #18
 800131c:	b29b      	uxth	r3, r3
 800131e:	3b01      	subs	r3, #1
 8001320:	b29b      	uxth	r3, r3
 8001322:	813b      	strh	r3, [r7, #8]
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	3b01      	subs	r3, #1
 8001328:	b29b      	uxth	r3, r3
 800132a:	817b      	strh	r3, [r7, #10]
 800132c:	2300      	movs	r3, #0
 800132e:	81bb      	strh	r3, [r7, #12]
 8001330:	2300      	movs	r3, #0
 8001332:	81fb      	strh	r3, [r7, #14]
 8001334:	2301      	movs	r3, #1
 8001336:	743b      	strb	r3, [r7, #16]
 8001338:	2300      	movs	r3, #0
 800133a:	747b      	strb	r3, [r7, #17]
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
    TIMER_1_8_start(TIM1,&l_t_delay);
 8001340:	f107 0308 	add.w	r3, r7, #8
 8001344:	4619      	mov	r1, r3
 8001346:	4804      	ldr	r0, [pc, #16]	; (8001358 <_TIM1_delay_us+0x54>)
 8001348:	f7ff ff0e 	bl	8001168 <TIMER_1_8_start>
}
 800134c:	bf00      	nop
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	431bde83 	.word	0x431bde83
 8001358:	40012c00 	.word	0x40012c00

0800135c <_TIM1_delay_ms>:

void _TIM1_delay_ms(uint16_t delay)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	80fb      	strh	r3, [r7, #6]
    for(uint32_t i=0; i<delay; i++)
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	e006      	b.n	800137a <_TIM1_delay_ms+0x1e>
        _TIM1_delay_us(1000);
 800136c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001370:	f7ff ffc8 	bl	8001304 <_TIM1_delay_us>
    for(uint32_t i=0; i<delay; i++)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	3301      	adds	r3, #1
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	429a      	cmp	r2, r3
 8001380:	d3f4      	bcc.n	800136c <_TIM1_delay_ms+0x10>
}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <_TIM1_delay_s>:

void _TIM1_delay_s(uint16_t delay)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b084      	sub	sp, #16
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	80fb      	strh	r3, [r7, #6]
    for(uint32_t i=0; i<delay; i++)
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	e006      	b.n	80013a8 <_TIM1_delay_s+0x1e>
        _TIM1_delay_ms(1000);
 800139a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800139e:	f7ff ffdd 	bl	800135c <_TIM1_delay_ms>
    for(uint32_t i=0; i<delay; i++)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	3301      	adds	r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d3f4      	bcc.n	800139a <_TIM1_delay_s+0x10>
}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <MCAL_USART_init>:

// ==================================================================================
// ===================================== APIS =======================================
// ==================================================================================
void MCAL_USART_init(USART_REG *USARTx,USART_Config_t *PIN)
{
 80013b8:	b5b0      	push	{r4, r5, r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
    if(USARTx==USART1)  // MAKE A BACKUP AND ENABLE THE CLOCK
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4aa9      	ldr	r2, [pc, #676]	; (800166c <MCAL_USART_init+0x2b4>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d10c      	bne.n	80013e4 <MCAL_USART_init+0x2c>
    {
        G_P_config[0]=*PIN;
 80013ca:	4aa9      	ldr	r2, [pc, #676]	; (8001670 <MCAL_USART_init+0x2b8>)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	4614      	mov	r4, r2
 80013d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        RCC->APB2ENR |=(1<<14);
 80013d6:	4ba7      	ldr	r3, [pc, #668]	; (8001674 <MCAL_USART_init+0x2bc>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	4aa6      	ldr	r2, [pc, #664]	; (8001674 <MCAL_USART_init+0x2bc>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	6193      	str	r3, [r2, #24]
 80013e2:	e024      	b.n	800142e <MCAL_USART_init+0x76>
    }
    else if(USARTx==USART2)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4aa4      	ldr	r2, [pc, #656]	; (8001678 <MCAL_USART_init+0x2c0>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d10e      	bne.n	800140a <MCAL_USART_init+0x52>
    {
        G_P_config[1]=*PIN;
 80013ec:	4ba0      	ldr	r3, [pc, #640]	; (8001670 <MCAL_USART_init+0x2b8>)
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	f103 0410 	add.w	r4, r3, #16
 80013f4:	4613      	mov	r3, r2
 80013f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        RCC->APB1ENR |=(1<<17);
 80013fc:	4b9d      	ldr	r3, [pc, #628]	; (8001674 <MCAL_USART_init+0x2bc>)
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	4a9c      	ldr	r2, [pc, #624]	; (8001674 <MCAL_USART_init+0x2bc>)
 8001402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001406:	61d3      	str	r3, [r2, #28]
 8001408:	e011      	b.n	800142e <MCAL_USART_init+0x76>
    }
    else if(USARTx==USART3)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a9b      	ldr	r2, [pc, #620]	; (800167c <MCAL_USART_init+0x2c4>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d10d      	bne.n	800142e <MCAL_USART_init+0x76>
    {
        G_P_config[2]=*PIN;
 8001412:	4b97      	ldr	r3, [pc, #604]	; (8001670 <MCAL_USART_init+0x2b8>)
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	f103 0420 	add.w	r4, r3, #32
 800141a:	4613      	mov	r3, r2
 800141c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800141e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        RCC->APB1ENR |=(1<<18);
 8001422:	4b94      	ldr	r3, [pc, #592]	; (8001674 <MCAL_USART_init+0x2bc>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	4a93      	ldr	r2, [pc, #588]	; (8001674 <MCAL_USART_init+0x2bc>)
 8001428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800142c:	61d3      	str	r3, [r2, #28]


    }
    // 1. Enable the USART by writing the UE bit in USART_CR1 register to 1.
    USARTx->CR1 |=(1<<13);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	60da      	str	r2, [r3, #12]
    //2. Program the M bit in USART_CR1 to define the word length.
    USARTx->CR1 |=(PIN->Word<<12);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	7912      	ldrb	r2, [r2, #4]
 8001442:	0312      	lsls	r2, r2, #12
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	60da      	str	r2, [r3, #12]
    //3. Program the number of stop bits in USART_CR2
    USARTx->CR2 |=(PIN->STOP<<12);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	79d2      	ldrb	r2, [r2, #7]
 8001452:	0312      	lsls	r2, r2, #12
 8001454:	431a      	orrs	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	611a      	str	r2, [r3, #16]
    if(PIN->MODE ==Asynchronous)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	7a5b      	ldrb	r3, [r3, #9]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10b      	bne.n	800147a <MCAL_USART_init+0xc2>
    {
        //	6. Set the TE bit in USART_CR1 to send an idle frame as first transmission
        USARTx->CR1 |=(1<<3);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	f043 0208 	orr.w	r2, r3, #8
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	60da      	str	r2, [r3, #12]
        //	7. Set the RE bit in USART_CR1 to send an idle frame as first transmission
        USARTx->CR1 |=(1<<2);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	f043 0204 	orr.w	r2, r3, #4
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	60da      	str	r2, [r3, #12]
    {

    }
    //	8. Set the CTSE&RTSE bit in USART_CR3 to enable CTS&RTS hardware flow control

    switch( PIN->HW )
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	7a1b      	ldrb	r3, [r3, #8]
 800147e:	2b03      	cmp	r3, #3
 8001480:	d826      	bhi.n	80014d0 <MCAL_USART_init+0x118>
 8001482:	a201      	add	r2, pc, #4	; (adr r2, 8001488 <MCAL_USART_init+0xd0>)
 8001484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001488:	08001499 	.word	0x08001499
 800148c:	080014a7 	.word	0x080014a7
 8001490:	080014b5 	.word	0x080014b5
 8001494:	080014c3 	.word	0x080014c3
    {
    case Disabled:
        USARTx->CR3 &=~(RTS_EN |CTS_EN);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	615a      	str	r2, [r3, #20]
        break;
 80014a4:	e014      	b.n	80014d0 <MCAL_USART_init+0x118>
    case RTSE:
        USARTx->CR3 |=RTS_EN;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	615a      	str	r2, [r3, #20]
        break;
 80014b2:	e00d      	b.n	80014d0 <MCAL_USART_init+0x118>
    case CTSE:
        USARTx->CR3 |=CTS_EN;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	615a      	str	r2, [r3, #20]
        break;
 80014c0:	e006      	b.n	80014d0 <MCAL_USART_init+0x118>
    case BOTH:
        USARTx->CR3 |=CTS_EN |RTS_EN;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	615a      	str	r2, [r3, #20]
        break;
 80014ce:	bf00      	nop
    }

    //	9. Set the PCE &PS bit in USART_CR1 to send an idle frame as first transmission
    USARTx->CR1 |=(PIN->Parity<<9);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	7952      	ldrb	r2, [r2, #5]
 80014d8:	0252      	lsls	r2, r2, #9
 80014da:	431a      	orrs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	60da      	str	r2, [r3, #12]
    if(PIN->MEC ==Interrupt)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	799b      	ldrb	r3, [r3, #6]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d125      	bne.n	8001534 <MCAL_USART_init+0x17c>
    {
        //ENABLE NVIC 	ISER1 32-63
        if(USARTx==USART1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a60      	ldr	r2, [pc, #384]	; (800166c <MCAL_USART_init+0x2b4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d106      	bne.n	80014fe <MCAL_USART_init+0x146>
        {
            NVIC_ISER1 |=(1<<(USART1_IRQ-32));
 80014f0:	4b63      	ldr	r3, [pc, #396]	; (8001680 <MCAL_USART_init+0x2c8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a62      	ldr	r2, [pc, #392]	; (8001680 <MCAL_USART_init+0x2c8>)
 80014f6:	f043 0320 	orr.w	r3, r3, #32
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	e014      	b.n	8001528 <MCAL_USART_init+0x170>
        }
        else if(USARTx==USART2)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a5d      	ldr	r2, [pc, #372]	; (8001678 <MCAL_USART_init+0x2c0>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d106      	bne.n	8001514 <MCAL_USART_init+0x15c>
        {
            NVIC_ISER1 |=(1<<(USART2_IRQ-32));
 8001506:	4b5e      	ldr	r3, [pc, #376]	; (8001680 <MCAL_USART_init+0x2c8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a5d      	ldr	r2, [pc, #372]	; (8001680 <MCAL_USART_init+0x2c8>)
 800150c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	e009      	b.n	8001528 <MCAL_USART_init+0x170>
        }
        else if(USARTx==USART3)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a59      	ldr	r2, [pc, #356]	; (800167c <MCAL_USART_init+0x2c4>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d105      	bne.n	8001528 <MCAL_USART_init+0x170>
        {
            NVIC_ISER1 |=(1<<(USART3_IRQ-32));
 800151c:	4b58      	ldr	r3, [pc, #352]	; (8001680 <MCAL_USART_init+0x2c8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a57      	ldr	r2, [pc, #348]	; (8001680 <MCAL_USART_init+0x2c8>)
 8001522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001526:	6013      	str	r3, [r2, #0]
        }
        //Bit 7 TXEIE: TXE interrupt enable				//		Bit 5 RXNEIE: RXNE interrupt enable
        USARTx->CR1 |=(1<<5) ;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	f043 0220 	orr.w	r2, r3, #32
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	60da      	str	r2, [r3, #12]
    }

    if(USARTx==USART1)  // MAKE A BACKUP AND ENABLE THE CLOCK
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a4d      	ldr	r2, [pc, #308]	; (800166c <MCAL_USART_init+0x2b4>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d12d      	bne.n	8001598 <MCAL_USART_init+0x1e0>
    {
        USARTx->BRR=BRR(MCAL_GET_PCLCK2(),PIN->Baud_Rate);
 800153c:	f7ff fd9e 	bl	800107c <MCAL_GET_PCLCK2>
 8001540:	4602      	mov	r2, r0
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	fbb2 f3f3 	udiv	r3, r2, r3
 800154c:	011c      	lsls	r4, r3, #4
 800154e:	f7ff fd95 	bl	800107c <MCAL_GET_PCLCK2>
 8001552:	4602      	mov	r2, r0
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	009a      	lsls	r2, r3, #2
 800155c:	441a      	add	r2, r3
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	fbb2 f5f3 	udiv	r5, r2, r3
 8001568:	f7ff fd88 	bl	800107c <MCAL_GET_PCLCK2>
 800156c:	4602      	mov	r2, r0
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	011b      	lsls	r3, r3, #4
 8001574:	fbb2 f3f3 	udiv	r3, r2, r3
 8001578:	2264      	movs	r2, #100	; 0x64
 800157a:	fb02 f303 	mul.w	r3, r2, r3
 800157e:	1aeb      	subs	r3, r5, r3
 8001580:	011b      	lsls	r3, r3, #4
 8001582:	4a40      	ldr	r2, [pc, #256]	; (8001684 <MCAL_USART_init+0x2cc>)
 8001584:	fba2 2303 	umull	r2, r3, r2, r3
 8001588:	095b      	lsrs	r3, r3, #5
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	ea44 0203 	orr.w	r2, r4, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	e062      	b.n	800165e <MCAL_USART_init+0x2a6>
    }
    else if(USARTx==USART2)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a37      	ldr	r2, [pc, #220]	; (8001678 <MCAL_USART_init+0x2c0>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d12d      	bne.n	80015fc <MCAL_USART_init+0x244>
    {
        USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 80015a0:	f7ff fd58 	bl	8001054 <MCAL_GET_PCLCK1>
 80015a4:	4602      	mov	r2, r0
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	011b      	lsls	r3, r3, #4
 80015ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b0:	011c      	lsls	r4, r3, #4
 80015b2:	f7ff fd4f 	bl	8001054 <MCAL_GET_PCLCK1>
 80015b6:	4602      	mov	r2, r0
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	009a      	lsls	r2, r3, #2
 80015c0:	441a      	add	r2, r3
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	fbb2 f5f3 	udiv	r5, r2, r3
 80015cc:	f7ff fd42 	bl	8001054 <MCAL_GET_PCLCK1>
 80015d0:	4602      	mov	r2, r0
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	011b      	lsls	r3, r3, #4
 80015d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015dc:	2264      	movs	r2, #100	; 0x64
 80015de:	fb02 f303 	mul.w	r3, r2, r3
 80015e2:	1aeb      	subs	r3, r5, r3
 80015e4:	011b      	lsls	r3, r3, #4
 80015e6:	4a27      	ldr	r2, [pc, #156]	; (8001684 <MCAL_USART_init+0x2cc>)
 80015e8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ec:	095b      	lsrs	r3, r3, #5
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	ea44 0203 	orr.w	r2, r4, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	e030      	b.n	800165e <MCAL_USART_init+0x2a6>
    }
    else if(USARTx==USART3)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a1f      	ldr	r2, [pc, #124]	; (800167c <MCAL_USART_init+0x2c4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d12c      	bne.n	800165e <MCAL_USART_init+0x2a6>
    {
        USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 8001604:	f7ff fd26 	bl	8001054 <MCAL_GET_PCLCK1>
 8001608:	4602      	mov	r2, r0
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	fbb2 f3f3 	udiv	r3, r2, r3
 8001614:	011c      	lsls	r4, r3, #4
 8001616:	f7ff fd1d 	bl	8001054 <MCAL_GET_PCLCK1>
 800161a:	4602      	mov	r2, r0
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	009a      	lsls	r2, r3, #2
 8001624:	441a      	add	r2, r3
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	fbb2 f5f3 	udiv	r5, r2, r3
 8001630:	f7ff fd10 	bl	8001054 <MCAL_GET_PCLCK1>
 8001634:	4602      	mov	r2, r0
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	011b      	lsls	r3, r3, #4
 800163c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001640:	2264      	movs	r2, #100	; 0x64
 8001642:	fb02 f303 	mul.w	r3, r2, r3
 8001646:	1aeb      	subs	r3, r5, r3
 8001648:	011b      	lsls	r3, r3, #4
 800164a:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <MCAL_USART_init+0x2cc>)
 800164c:	fba2 2303 	umull	r2, r3, r2, r3
 8001650:	095b      	lsrs	r3, r3, #5
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	ea44 0203 	orr.w	r2, r4, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	609a      	str	r2, [r3, #8]
    }
    SET_GPIO(USARTx);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f89c 	bl	800179c <SET_GPIO>
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bdb0      	pop	{r4, r5, r7, pc}
 800166c:	40013800 	.word	0x40013800
 8001670:	200002c0 	.word	0x200002c0
 8001674:	40021000 	.word	0x40021000
 8001678:	40004400 	.word	0x40004400
 800167c:	40004800 	.word	0x40004800
 8001680:	e000e104 	.word	0xe000e104
 8001684:	51eb851f 	.word	0x51eb851f

08001688 <MCAL_USART_SendData>:
        NVIC_ICER1 |=(1<<(USART3_IRQ-32));
    }
}

void MCAL_USART_SendData(USART_REG *USARTx,uint8_t data)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	70fb      	strb	r3, [r7, #3]
    USART_Config_t * L_P_config_pin=NULL;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
//	USARTx->DR=0;
    if(USARTx==USART1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a15      	ldr	r2, [pc, #84]	; (80016f0 <MCAL_USART_SendData+0x68>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d102      	bne.n	80016a6 <MCAL_USART_SendData+0x1e>
    {
        L_P_config_pin=&G_P_config[0];
 80016a0:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <MCAL_USART_SendData+0x6c>)
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	e00c      	b.n	80016c0 <MCAL_USART_SendData+0x38>
    }
    else if(USARTx==USART2)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a13      	ldr	r2, [pc, #76]	; (80016f8 <MCAL_USART_SendData+0x70>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d102      	bne.n	80016b4 <MCAL_USART_SendData+0x2c>
    {
        L_P_config_pin=&G_P_config[1];
 80016ae:	4b13      	ldr	r3, [pc, #76]	; (80016fc <MCAL_USART_SendData+0x74>)
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	e005      	b.n	80016c0 <MCAL_USART_SendData+0x38>
    }
    else if(USARTx==USART3)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a12      	ldr	r2, [pc, #72]	; (8001700 <MCAL_USART_SendData+0x78>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d101      	bne.n	80016c0 <MCAL_USART_SendData+0x38>
    {
        L_P_config_pin=&G_P_config[2];
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MCAL_USART_SendData+0x7c>)
 80016be:	60fb      	str	r3, [r7, #12]
    }
    while(!(USARTx->SR & (1<<7)));
 80016c0:	bf00      	nop
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f9      	beq.n	80016c2 <MCAL_USART_SendData+0x3a>

    // check if the word size if 9B or 8B
    if(L_P_config_pin->Word ==NINE_BITS)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	791b      	ldrb	r3, [r3, #4]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d103      	bne.n	80016de <MCAL_USART_SendData+0x56>
    {
        USARTx->DR =((uint8_t)data & (uint8_t)0x1FF);
 80016d6:	78fa      	ldrb	r2, [r7, #3]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	605a      	str	r2, [r3, #4]
    }
    else
    {
        USARTx->DR =((uint8_t)data & (uint8_t)0xFF);
    }
}
 80016dc:	e002      	b.n	80016e4 <MCAL_USART_SendData+0x5c>
        USARTx->DR =((uint8_t)data & (uint8_t)0xFF);
 80016de:	78fa      	ldrb	r2, [r7, #3]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	605a      	str	r2, [r3, #4]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40013800 	.word	0x40013800
 80016f4:	200002c0 	.word	0x200002c0
 80016f8:	40004400 	.word	0x40004400
 80016fc:	200002d0 	.word	0x200002d0
 8001700:	40004800 	.word	0x40004800
 8001704:	200002e0 	.word	0x200002e0

08001708 <MCAL_USART_ReciveData>:

uint16_t MCAL_USART_ReciveData(USART_REG *USARTx)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
    USART_Config_t * L_P_config_pin=NULL;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
    if(USARTx==USART1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a1b      	ldr	r2, [pc, #108]	; (8001784 <MCAL_USART_ReciveData+0x7c>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d102      	bne.n	8001722 <MCAL_USART_ReciveData+0x1a>
    {
        L_P_config_pin=&G_P_config[0];
 800171c:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <MCAL_USART_ReciveData+0x80>)
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	e00c      	b.n	800173c <MCAL_USART_ReciveData+0x34>
    }
    else if(USARTx==USART2)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a19      	ldr	r2, [pc, #100]	; (800178c <MCAL_USART_ReciveData+0x84>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d102      	bne.n	8001730 <MCAL_USART_ReciveData+0x28>
    {
        L_P_config_pin=&G_P_config[1];
 800172a:	4b19      	ldr	r3, [pc, #100]	; (8001790 <MCAL_USART_ReciveData+0x88>)
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	e005      	b.n	800173c <MCAL_USART_ReciveData+0x34>
    }
    else if(USARTx==USART3)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a18      	ldr	r2, [pc, #96]	; (8001794 <MCAL_USART_ReciveData+0x8c>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d101      	bne.n	800173c <MCAL_USART_ReciveData+0x34>
    {
        L_P_config_pin=&G_P_config[2];
 8001738:	4b17      	ldr	r3, [pc, #92]	; (8001798 <MCAL_USART_ReciveData+0x90>)
 800173a:	60fb      	str	r3, [r7, #12]
    }

    if(L_P_config_pin->MEC ==POLLING)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	799b      	ldrb	r3, [r3, #6]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d107      	bne.n	8001754 <MCAL_USART_ReciveData+0x4c>
    {
        while(!(USARTx->SR & (1<<5)));
 8001744:	bf00      	nop
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0320 	and.w	r3, r3, #32
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f9      	beq.n	8001746 <MCAL_USART_ReciveData+0x3e>
 8001752:	e002      	b.n	800175a <MCAL_USART_ReciveData+0x52>
    }
    else if(L_P_config_pin->MEC ==Interrupt)   // Do nothing the cpu will jump to isr
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	799b      	ldrb	r3, [r3, #6]
 8001758:	2b01      	cmp	r3, #1
    }
    else if(L_P_config_pin->MEC ==DMA)   // will modified later
    {

    }
    if(L_P_config_pin->Parity ==Parity_DISABLE)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	795b      	ldrb	r3, [r3, #5]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d104      	bne.n	800176c <MCAL_USART_ReciveData+0x64>
    {
        return ((uint8_t)USARTx->DR& (uint8_t)0xFF);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	b29b      	uxth	r3, r3
 800176a:	e006      	b.n	800177a <MCAL_USART_ReciveData+0x72>
    }
    else
    {
        return ((uint8_t)USARTx->DR &(uint8_t)0x7F);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	b29b      	uxth	r3, r3
 8001774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001778:	b29b      	uxth	r3, r3
    }
}
 800177a:	4618      	mov	r0, r3
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	40013800 	.word	0x40013800
 8001788:	200002c0 	.word	0x200002c0
 800178c:	40004400 	.word	0x40004400
 8001790:	200002d0 	.word	0x200002d0
 8001794:	40004800 	.word	0x40004800
 8001798:	200002e0 	.word	0x200002e0

0800179c <SET_GPIO>:

void SET_GPIO(USART_REG *USARTx)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
    PIN_config GPIO= {PIN_9,OUTPUT_AF_PP,SPEED_2}; // CONFIGRATION OF TX PIN
 80017a4:	4b2c      	ldr	r3, [pc, #176]	; (8001858 <SET_GPIO+0xbc>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	60fb      	str	r3, [r7, #12]
    if(USARTx==USART1)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a2b      	ldr	r2, [pc, #172]	; (800185c <SET_GPIO+0xc0>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d115      	bne.n	80017de <SET_GPIO+0x42>
    {
        RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 80017b2:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <SET_GPIO+0xc4>)
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	4a2a      	ldr	r2, [pc, #168]	; (8001860 <SET_GPIO+0xc4>)
 80017b8:	f043 0304 	orr.w	r3, r3, #4
 80017bc:	6193      	str	r3, [r2, #24]
        MCAL_GPIO_init(GPIOA, &GPIO);
 80017be:	f107 030c 	add.w	r3, r7, #12
 80017c2:	4619      	mov	r1, r3
 80017c4:	4827      	ldr	r0, [pc, #156]	; (8001864 <SET_GPIO+0xc8>)
 80017c6:	f7ff f9a7 	bl	8000b18 <MCAL_GPIO_init>
        GPIO =(PIN_config)
 80017ca:	4b27      	ldr	r3, [pc, #156]	; (8001868 <SET_GPIO+0xcc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	60fb      	str	r3, [r7, #12]
        {
            PIN_10,INPUT_FI,0
        }; //CONFIGRATION OF RX PIN
        MCAL_GPIO_init(GPIOA, &GPIO);
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	4619      	mov	r1, r3
 80017d6:	4823      	ldr	r0, [pc, #140]	; (8001864 <SET_GPIO+0xc8>)
 80017d8:	f7ff f99e 	bl	8000b18 <MCAL_GPIO_init>
        {
            PIN_11,INPUT_FI,0
        }; //CONFIGRATION OF RX PIN
        MCAL_GPIO_init(GPIOB, &GPIO);
    }
}
 80017dc:	e038      	b.n	8001850 <SET_GPIO+0xb4>
    else if(USARTx==USART2)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a22      	ldr	r2, [pc, #136]	; (800186c <SET_GPIO+0xd0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d118      	bne.n	8001818 <SET_GPIO+0x7c>
        RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 80017e6:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <SET_GPIO+0xc4>)
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	4a1d      	ldr	r2, [pc, #116]	; (8001860 <SET_GPIO+0xc4>)
 80017ec:	f043 0304 	orr.w	r3, r3, #4
 80017f0:	6193      	str	r3, [r2, #24]
        GPIO=(PIN_config)
 80017f2:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <SET_GPIO+0xd4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	60fb      	str	r3, [r7, #12]
        MCAL_GPIO_init(GPIOA, &GPIO);
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	4619      	mov	r1, r3
 80017fe:	4819      	ldr	r0, [pc, #100]	; (8001864 <SET_GPIO+0xc8>)
 8001800:	f7ff f98a 	bl	8000b18 <MCAL_GPIO_init>
        GPIO =(PIN_config)
 8001804:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <SET_GPIO+0xd8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	60fb      	str	r3, [r7, #12]
        MCAL_GPIO_init(GPIOA, &GPIO);
 800180a:	f107 030c 	add.w	r3, r7, #12
 800180e:	4619      	mov	r1, r3
 8001810:	4814      	ldr	r0, [pc, #80]	; (8001864 <SET_GPIO+0xc8>)
 8001812:	f7ff f981 	bl	8000b18 <MCAL_GPIO_init>
}
 8001816:	e01b      	b.n	8001850 <SET_GPIO+0xb4>
    else if(USARTx==USART3)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a17      	ldr	r2, [pc, #92]	; (8001878 <SET_GPIO+0xdc>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d117      	bne.n	8001850 <SET_GPIO+0xb4>
        RCC->APB2ENR |=(1<<3); // Enable Colck to write on GPIOA
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <SET_GPIO+0xc4>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4a0e      	ldr	r2, [pc, #56]	; (8001860 <SET_GPIO+0xc4>)
 8001826:	f043 0308 	orr.w	r3, r3, #8
 800182a:	6193      	str	r3, [r2, #24]
        GPIO=(PIN_config)
 800182c:	4b13      	ldr	r3, [pc, #76]	; (800187c <SET_GPIO+0xe0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60fb      	str	r3, [r7, #12]
        MCAL_GPIO_init(GPIOB, &GPIO);
 8001832:	f107 030c 	add.w	r3, r7, #12
 8001836:	4619      	mov	r1, r3
 8001838:	4811      	ldr	r0, [pc, #68]	; (8001880 <SET_GPIO+0xe4>)
 800183a:	f7ff f96d 	bl	8000b18 <MCAL_GPIO_init>
        GPIO =(PIN_config)
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <SET_GPIO+0xe8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	60fb      	str	r3, [r7, #12]
        MCAL_GPIO_init(GPIOB, &GPIO);
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	4619      	mov	r1, r3
 800184a:	480d      	ldr	r0, [pc, #52]	; (8001880 <SET_GPIO+0xe4>)
 800184c:	f7ff f964 	bl	8000b18 <MCAL_GPIO_init>
}
 8001850:	bf00      	nop
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	08001d1c 	.word	0x08001d1c
 800185c:	40013800 	.word	0x40013800
 8001860:	40021000 	.word	0x40021000
 8001864:	40010800 	.word	0x40010800
 8001868:	08001d20 	.word	0x08001d20
 800186c:	40004400 	.word	0x40004400
 8001870:	08001d24 	.word	0x08001d24
 8001874:	08001d28 	.word	0x08001d28
 8001878:	40004800 	.word	0x40004800
 800187c:	08001d2c 	.word	0x08001d2c
 8001880:	40010c00 	.word	0x40010c00
 8001884:	08001d30 	.word	0x08001d30

08001888 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
    if( UART_STATUS_CHECK(USART1))
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <USART1_IRQHandler+0x1c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0320 	and.w	r3, r3, #32
 8001894:	2b00      	cmp	r3, #0
 8001896:	d002      	beq.n	800189e <USART1_IRQHandler+0x16>
    {
        G_P_config[0].P_Call_Back();
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <USART1_IRQHandler+0x20>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	4798      	blx	r3
    }
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40013800 	.word	0x40013800
 80018a8:	200002c0 	.word	0x200002c0

080018ac <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
    if( UART_STATUS_CHECK(USART2))
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <USART2_IRQHandler+0x1c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0320 	and.w	r3, r3, #32
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d002      	beq.n	80018c2 <USART2_IRQHandler+0x16>
    {
        G_P_config[1].P_Call_Back();
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <USART2_IRQHandler+0x20>)
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	4798      	blx	r3
    }
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40004400 	.word	0x40004400
 80018cc:	200002c0 	.word	0x200002c0

080018d0 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
    if( UART_STATUS_CHECK(USART3))
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <USART3_IRQHandler+0x1c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0320 	and.w	r3, r3, #32
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d002      	beq.n	80018e6 <USART3_IRQHandler+0x16>
    {
        G_P_config[2].P_Call_Back();
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <USART3_IRQHandler+0x20>)
 80018e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e4:	4798      	blx	r3
    }
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40004800 	.word	0x40004800
 80018f0:	200002c0 	.word	0x200002c0

080018f4 <ERROR_HANDLER>:
#endif

#include "main.h"
void HW_init();
void ERROR_HANDLER()
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
	while(1);
 80018f8:	e7fe      	b.n	80018f8 <ERROR_HANDLER+0x4>

080018fa <main>:
uint8_t AT_DATA[4] = "    ";
uint8_t index = 1;

float temperature;
int main(void)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	af00      	add	r7, sp, #0
	HW_init();
 80018fe:	f000 f801 	bl	8001904 <HW_init>

	while(1)
 8001902:	e7fe      	b.n	8001902 <main+0x8>

08001904 <HW_init>:

	}
}

void HW_init()
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8001908:	4b3e      	ldr	r3, [pc, #248]	; (8001a04 <HW_init+0x100>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	4a3d      	ldr	r2, [pc, #244]	; (8001a04 <HW_init+0x100>)
 800190e:	f043 0304 	orr.w	r3, r3, #4
 8001912:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8001914:	4b3b      	ldr	r3, [pc, #236]	; (8001a04 <HW_init+0x100>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	4a3a      	ldr	r2, [pc, #232]	; (8001a04 <HW_init+0x100>)
 800191a:	f043 0308 	orr.w	r3, r3, #8
 800191e:	6193      	str	r3, [r2, #24]
	RCC_GPIOC_CLK_EN();
 8001920:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <HW_init+0x100>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	4a37      	ldr	r2, [pc, #220]	; (8001a04 <HW_init+0x100>)
 8001926:	f043 0310 	orr.w	r3, r3, #16
 800192a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800192c:	4b35      	ldr	r3, [pc, #212]	; (8001a04 <HW_init+0x100>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	4a34      	ldr	r2, [pc, #208]	; (8001a04 <HW_init+0x100>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6193      	str	r3, [r2, #24]
	RCC_USART1_CLK_EN();
 8001938:	4b32      	ldr	r3, [pc, #200]	; (8001a04 <HW_init+0x100>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a31      	ldr	r2, [pc, #196]	; (8001a04 <HW_init+0x100>)
 800193e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001942:	6193      	str	r3, [r2, #24]
	RCC_USART2_CLK_EN();
 8001944:	4b2f      	ldr	r3, [pc, #188]	; (8001a04 <HW_init+0x100>)
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	4a2e      	ldr	r2, [pc, #184]	; (8001a04 <HW_init+0x100>)
 800194a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800194e:	61d3      	str	r3, [r2, #28]
	RCC_USART3_CLK_EN();
 8001950:	4b2c      	ldr	r3, [pc, #176]	; (8001a04 <HW_init+0x100>)
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	4a2b      	ldr	r2, [pc, #172]	; (8001a04 <HW_init+0x100>)
 8001956:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800195a:	61d3      	str	r3, [r2, #28]
	HAL_LCD_INIT();
 800195c:	f7fe fcce 	bl	80002fc <HAL_LCD_INIT>
	MCAL_EXTI_init(&Right_flame);
 8001960:	4829      	ldr	r0, [pc, #164]	; (8001a08 <HW_init+0x104>)
 8001962:	f7fe fecf 	bl	8000704 <MCAL_EXTI_init>
	MCAL_EXTI_init(&Left_flame);
 8001966:	4829      	ldr	r0, [pc, #164]	; (8001a0c <HW_init+0x108>)
 8001968:	f7fe fecc 	bl	8000704 <MCAL_EXTI_init>
	MCAL_EXTI_init(&Right_Mq4);
 800196c:	4828      	ldr	r0, [pc, #160]	; (8001a10 <HW_init+0x10c>)
 800196e:	f7fe fec9 	bl	8000704 <MCAL_EXTI_init>
	MCAL_EXTI_init(&Left_Mq4);
 8001972:	4828      	ldr	r0, [pc, #160]	; (8001a14 <HW_init+0x110>)
 8001974:	f7fe fec6 	bl	8000704 <MCAL_EXTI_init>
	Sarina.PIN_number = PIN_8;
 8001978:	4b27      	ldr	r3, [pc, #156]	; (8001a18 <HW_init+0x114>)
 800197a:	2208      	movs	r2, #8
 800197c:	801a      	strh	r2, [r3, #0]
	Sarina.MODE = OUTPUT_PP;
 800197e:	4b26      	ldr	r3, [pc, #152]	; (8001a18 <HW_init+0x114>)
 8001980:	2204      	movs	r2, #4
 8001982:	709a      	strb	r2, [r3, #2]
	Sarina.SPEED = SPEED_10;
 8001984:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <HW_init+0x114>)
 8001986:	2201      	movs	r2, #1
 8001988:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(GPIOB,&Sarina);
 800198a:	4923      	ldr	r1, [pc, #140]	; (8001a18 <HW_init+0x114>)
 800198c:	4823      	ldr	r0, [pc, #140]	; (8001a1c <HW_init+0x118>)
 800198e:	f7ff f8c3 	bl	8000b18 <MCAL_GPIO_init>
	_Uart1.Baud_Rate = 19200;
 8001992:	4b23      	ldr	r3, [pc, #140]	; (8001a20 <HW_init+0x11c>)
 8001994:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001998:	601a      	str	r2, [r3, #0]
	_Uart1.Word = EGHIT_BITS;  // Check if this is correctly defined in your header
 800199a:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <HW_init+0x11c>)
 800199c:	2200      	movs	r2, #0
 800199e:	711a      	strb	r2, [r3, #4]
	_Uart1.STOP = ONE_STOP_BIT;
 80019a0:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <HW_init+0x11c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	71da      	strb	r2, [r3, #7]
	_Uart1.Parity = Parity_DISABLE;
 80019a6:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <HW_init+0x11c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	715a      	strb	r2, [r3, #5]
	_Uart1.MODE = Asynchronous;
 80019ac:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <HW_init+0x11c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	725a      	strb	r2, [r3, #9]
	_Uart1.MEC = POLLING;
 80019b2:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <HW_init+0x11c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	719a      	strb	r2, [r3, #6]
	_Uart1.HW = Disabled;
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HW_init+0x11c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	721a      	strb	r2, [r3, #8]
	_Uart3.Baud_Rate = 19200;
 80019be:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HW_init+0x120>)
 80019c0:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80019c4:	601a      	str	r2, [r3, #0]
	_Uart3.Word = EGHIT_BITS;  // Check if this is correctly defined in your header
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <HW_init+0x120>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	711a      	strb	r2, [r3, #4]
	_Uart3.STOP = ONE_STOP_BIT;
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HW_init+0x120>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	71da      	strb	r2, [r3, #7]
	_Uart3.Parity = Parity_DISABLE;
 80019d2:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <HW_init+0x120>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	715a      	strb	r2, [r3, #5]
	_Uart3.MODE = Asynchronous;
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HW_init+0x120>)
 80019da:	2200      	movs	r2, #0
 80019dc:	725a      	strb	r2, [r3, #9]
	_Uart3.MEC = Interrupt;
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <HW_init+0x120>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	719a      	strb	r2, [r3, #6]
	_Uart3.P_Call_Back = uart3_receive;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <HW_init+0x120>)
 80019e6:	4a10      	ldr	r2, [pc, #64]	; (8001a28 <HW_init+0x124>)
 80019e8:	60da      	str	r2, [r3, #12]
			_Uart3.HW = Disabled;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <HW_init+0x120>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	721a      	strb	r2, [r3, #8]
	MCAL_USART_init(USART1, &_Uart1);
 80019f0:	490b      	ldr	r1, [pc, #44]	; (8001a20 <HW_init+0x11c>)
 80019f2:	480e      	ldr	r0, [pc, #56]	; (8001a2c <HW_init+0x128>)
 80019f4:	f7ff fce0 	bl	80013b8 <MCAL_USART_init>
	MCAL_USART_init(USART3, &_Uart3);
 80019f8:	490a      	ldr	r1, [pc, #40]	; (8001a24 <HW_init+0x120>)
 80019fa:	480d      	ldr	r0, [pc, #52]	; (8001a30 <HW_init+0x12c>)
 80019fc:	f7ff fcdc 	bl	80013b8 <MCAL_USART_init>
}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40021000 	.word	0x40021000
 8001a08:	2000001c 	.word	0x2000001c
 8001a0c:	20000030 	.word	0x20000030
 8001a10:	20000044 	.word	0x20000044
 8001a14:	20000058 	.word	0x20000058
 8001a18:	20000314 	.word	0x20000314
 8001a1c:	40010c00 	.word	0x40010c00
 8001a20:	200002f0 	.word	0x200002f0
 8001a24:	20000304 	.word	0x20000304
 8001a28:	08001b39 	.word	0x08001b39
 8001a2c:	40013800 	.word	0x40013800
 8001a30:	40004800 	.word	0x40004800

08001a34 <Right_flame_sensor>:

void Right_flame_sensor()
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
	MCAL_write_PIN(GPIOB,PIN_8,LOGIC_HIGH);
 8001a38:	2201      	movs	r2, #1
 8001a3a:	2108      	movs	r1, #8
 8001a3c:	480c      	ldr	r0, [pc, #48]	; (8001a70 <Right_flame_sensor+0x3c>)
 8001a3e:	f7ff f953 	bl	8000ce8 <MCAL_write_PIN>
	MCAL_USART_SendData(USART1,'a');
 8001a42:	2161      	movs	r1, #97	; 0x61
 8001a44:	480b      	ldr	r0, [pc, #44]	; (8001a74 <Right_flame_sensor+0x40>)
 8001a46:	f7ff fe1f 	bl	8001688 <MCAL_USART_SendData>
	while(MCAL_Read_PIN(GPIOB,PIN_0));
 8001a4a:	bf00      	nop
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4808      	ldr	r0, [pc, #32]	; (8001a70 <Right_flame_sensor+0x3c>)
 8001a50:	f7ff f972 	bl	8000d38 <MCAL_Read_PIN>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f8      	bne.n	8001a4c <Right_flame_sensor+0x18>
	_TIM1_delay_s(3);
 8001a5a:	2003      	movs	r0, #3
 8001a5c:	f7ff fc95 	bl	800138a <_TIM1_delay_s>
	MCAL_write_PIN(GPIOB,PIN_8,LOGIC_LOW);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2108      	movs	r1, #8
 8001a64:	4802      	ldr	r0, [pc, #8]	; (8001a70 <Right_flame_sensor+0x3c>)
 8001a66:	f7ff f93f 	bl	8000ce8 <MCAL_write_PIN>
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40010c00 	.word	0x40010c00
 8001a74:	40013800 	.word	0x40013800

08001a78 <Left_flame_sensor>:
void Left_flame_sensor()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	MCAL_write_PIN(GPIOB,PIN_8,LOGIC_HIGH);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	2108      	movs	r1, #8
 8001a80:	480c      	ldr	r0, [pc, #48]	; (8001ab4 <Left_flame_sensor+0x3c>)
 8001a82:	f7ff f931 	bl	8000ce8 <MCAL_write_PIN>
	MCAL_USART_SendData(USART1,'b');
 8001a86:	2162      	movs	r1, #98	; 0x62
 8001a88:	480b      	ldr	r0, [pc, #44]	; (8001ab8 <Left_flame_sensor+0x40>)
 8001a8a:	f7ff fdfd 	bl	8001688 <MCAL_USART_SendData>
	while(MCAL_Read_PIN(GPIOB,PIN_1));
 8001a8e:	bf00      	nop
 8001a90:	2101      	movs	r1, #1
 8001a92:	4808      	ldr	r0, [pc, #32]	; (8001ab4 <Left_flame_sensor+0x3c>)
 8001a94:	f7ff f950 	bl	8000d38 <MCAL_Read_PIN>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f8      	bne.n	8001a90 <Left_flame_sensor+0x18>
	_TIM1_delay_s(3);
 8001a9e:	2003      	movs	r0, #3
 8001aa0:	f7ff fc73 	bl	800138a <_TIM1_delay_s>
	MCAL_write_PIN(GPIOB,PIN_8,LOGIC_LOW);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2108      	movs	r1, #8
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <Left_flame_sensor+0x3c>)
 8001aaa:	f7ff f91d 	bl	8000ce8 <MCAL_write_PIN>
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40010c00 	.word	0x40010c00
 8001ab8:	40013800 	.word	0x40013800

08001abc <Right_Mq4_sensor>:
void Right_Mq4_sensor()
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	MCAL_write_PIN(GPIOB,PIN_8,LOGIC_HIGH);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	2108      	movs	r1, #8
 8001ac4:	480c      	ldr	r0, [pc, #48]	; (8001af8 <Right_Mq4_sensor+0x3c>)
 8001ac6:	f7ff f90f 	bl	8000ce8 <MCAL_write_PIN>
	MCAL_USART_SendData(USART1,'c');
 8001aca:	2163      	movs	r1, #99	; 0x63
 8001acc:	480b      	ldr	r0, [pc, #44]	; (8001afc <Right_Mq4_sensor+0x40>)
 8001ace:	f7ff fddb 	bl	8001688 <MCAL_USART_SendData>
	while(MCAL_Read_PIN(GPIOB,PIN_2));
 8001ad2:	bf00      	nop
 8001ad4:	2102      	movs	r1, #2
 8001ad6:	4808      	ldr	r0, [pc, #32]	; (8001af8 <Right_Mq4_sensor+0x3c>)
 8001ad8:	f7ff f92e 	bl	8000d38 <MCAL_Read_PIN>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f8      	bne.n	8001ad4 <Right_Mq4_sensor+0x18>
	_TIM1_delay_s(3);
 8001ae2:	2003      	movs	r0, #3
 8001ae4:	f7ff fc51 	bl	800138a <_TIM1_delay_s>
	MCAL_write_PIN(GPIOB,PIN_8,LOGIC_LOW);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2108      	movs	r1, #8
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <Right_Mq4_sensor+0x3c>)
 8001aee:	f7ff f8fb 	bl	8000ce8 <MCAL_write_PIN>
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40010c00 	.word	0x40010c00
 8001afc:	40013800 	.word	0x40013800

08001b00 <Left_Mq4_sensor>:
void Left_Mq4_sensor()
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
	MCAL_USART_SendData(USART1,'d');
 8001b04:	2164      	movs	r1, #100	; 0x64
 8001b06:	480a      	ldr	r0, [pc, #40]	; (8001b30 <Left_Mq4_sensor+0x30>)
 8001b08:	f7ff fdbe 	bl	8001688 <MCAL_USART_SendData>
	while(MCAL_Read_PIN(GPIOB,PIN_3));
 8001b0c:	bf00      	nop
 8001b0e:	2103      	movs	r1, #3
 8001b10:	4808      	ldr	r0, [pc, #32]	; (8001b34 <Left_Mq4_sensor+0x34>)
 8001b12:	f7ff f911 	bl	8000d38 <MCAL_Read_PIN>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f8      	bne.n	8001b0e <Left_Mq4_sensor+0xe>
	_TIM1_delay_s(3);
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f7ff fc34 	bl	800138a <_TIM1_delay_s>
	MCAL_write_PIN(GPIOB,PIN_8,LOGIC_LOW);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2108      	movs	r1, #8
 8001b26:	4803      	ldr	r0, [pc, #12]	; (8001b34 <Left_Mq4_sensor+0x34>)
 8001b28:	f7ff f8de 	bl	8000ce8 <MCAL_write_PIN>
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40013800 	.word	0x40013800
 8001b34:	40010c00 	.word	0x40010c00

08001b38 <uart3_receive>:
void uart3_receive()
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
	AT_DATA[index] = MCAL_USART_ReciveData(USART3);
 8001b3c:	4845      	ldr	r0, [pc, #276]	; (8001c54 <uart3_receive+0x11c>)
 8001b3e:	f7ff fde3 	bl	8001708 <MCAL_USART_ReciveData>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4619      	mov	r1, r3
 8001b46:	4b44      	ldr	r3, [pc, #272]	; (8001c58 <uart3_receive+0x120>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	b2c9      	uxtb	r1, r1
 8001b4e:	4b43      	ldr	r3, [pc, #268]	; (8001c5c <uart3_receive+0x124>)
 8001b50:	5499      	strb	r1, [r3, r2]
		HAL_LCD_WRITE_CHAR('0');
 8001b52:	2030      	movs	r0, #48	; 0x30
 8001b54:	f7fe fc64 	bl	8000420 <HAL_LCD_WRITE_CHAR>
	if(index == 0)
 8001b58:	4b3f      	ldr	r3, [pc, #252]	; (8001c58 <uart3_receive+0x120>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d11a      	bne.n	8001b96 <uart3_receive+0x5e>
	{
		HAL_LCD_GOTO_XY(0, 1);
 8001b60:	2101      	movs	r1, #1
 8001b62:	2000      	movs	r0, #0
 8001b64:	f7fe fba6 	bl	80002b4 <HAL_LCD_GOTO_XY>
		if(AT_DATA[index]>45) MCAL_USART_SendData(USART1,'e');
 8001b68:	4b3b      	ldr	r3, [pc, #236]	; (8001c58 <uart3_receive+0x120>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b3b      	ldr	r3, [pc, #236]	; (8001c5c <uart3_receive+0x124>)
 8001b70:	5c9b      	ldrb	r3, [r3, r2]
 8001b72:	2b2d      	cmp	r3, #45	; 0x2d
 8001b74:	d903      	bls.n	8001b7e <uart3_receive+0x46>
 8001b76:	2165      	movs	r1, #101	; 0x65
 8001b78:	4839      	ldr	r0, [pc, #228]	; (8001c60 <uart3_receive+0x128>)
 8001b7a:	f7ff fd85 	bl	8001688 <MCAL_USART_SendData>
		if(AT_DATA[index]<25) MCAL_USART_SendData(USART1,'f');
 8001b7e:	4b36      	ldr	r3, [pc, #216]	; (8001c58 <uart3_receive+0x120>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	4b35      	ldr	r3, [pc, #212]	; (8001c5c <uart3_receive+0x124>)
 8001b86:	5c9b      	ldrb	r3, [r3, r2]
 8001b88:	2b18      	cmp	r3, #24
 8001b8a:	d853      	bhi.n	8001c34 <uart3_receive+0xfc>
 8001b8c:	2166      	movs	r1, #102	; 0x66
 8001b8e:	4834      	ldr	r0, [pc, #208]	; (8001c60 <uart3_receive+0x128>)
 8001b90:	f7ff fd7a 	bl	8001688 <MCAL_USART_SendData>
 8001b94:	e04e      	b.n	8001c34 <uart3_receive+0xfc>
	}
	else if(index == 1)
 8001b96:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <uart3_receive+0x120>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d11d      	bne.n	8001bda <uart3_receive+0xa2>
	{
		HAL_LCD_GOTO_XY(0, 7);
 8001b9e:	2107      	movs	r1, #7
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f7fe fb87 	bl	80002b4 <HAL_LCD_GOTO_XY>
		HAL_LCD_WRITE_CHAR('1');
 8001ba6:	2031      	movs	r0, #49	; 0x31
 8001ba8:	f7fe fc3a 	bl	8000420 <HAL_LCD_WRITE_CHAR>
		if(AT_DATA[index]>45) MCAL_USART_SendData(USART1,'g');
 8001bac:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <uart3_receive+0x120>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b2a      	ldr	r3, [pc, #168]	; (8001c5c <uart3_receive+0x124>)
 8001bb4:	5c9b      	ldrb	r3, [r3, r2]
 8001bb6:	2b2d      	cmp	r3, #45	; 0x2d
 8001bb8:	d903      	bls.n	8001bc2 <uart3_receive+0x8a>
 8001bba:	2167      	movs	r1, #103	; 0x67
 8001bbc:	4828      	ldr	r0, [pc, #160]	; (8001c60 <uart3_receive+0x128>)
 8001bbe:	f7ff fd63 	bl	8001688 <MCAL_USART_SendData>
		if(AT_DATA[index]<25) MCAL_USART_SendData(USART1,'h');
 8001bc2:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <uart3_receive+0x120>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <uart3_receive+0x124>)
 8001bca:	5c9b      	ldrb	r3, [r3, r2]
 8001bcc:	2b18      	cmp	r3, #24
 8001bce:	d831      	bhi.n	8001c34 <uart3_receive+0xfc>
 8001bd0:	2168      	movs	r1, #104	; 0x68
 8001bd2:	4823      	ldr	r0, [pc, #140]	; (8001c60 <uart3_receive+0x128>)
 8001bd4:	f7ff fd58 	bl	8001688 <MCAL_USART_SendData>
 8001bd8:	e02c      	b.n	8001c34 <uart3_receive+0xfc>
	}
	else if(index == 2)
 8001bda:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <uart3_receive+0x120>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d112      	bne.n	8001c08 <uart3_receive+0xd0>
	{
		HAL_LCD_GOTO_XY(1, 1);
 8001be2:	2101      	movs	r1, #1
 8001be4:	2001      	movs	r0, #1
 8001be6:	f7fe fb65 	bl	80002b4 <HAL_LCD_GOTO_XY>
		HAL_LCD_WRITE_CHAR('2');
 8001bea:	2032      	movs	r0, #50	; 0x32
 8001bec:	f7fe fc18 	bl	8000420 <HAL_LCD_WRITE_CHAR>
		if(AT_DATA[index]<50) MCAL_USART_SendData(USART1,'j');
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <uart3_receive+0x120>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <uart3_receive+0x124>)
 8001bf8:	5c9b      	ldrb	r3, [r3, r2]
 8001bfa:	2b31      	cmp	r3, #49	; 0x31
 8001bfc:	d81a      	bhi.n	8001c34 <uart3_receive+0xfc>
 8001bfe:	216a      	movs	r1, #106	; 0x6a
 8001c00:	4817      	ldr	r0, [pc, #92]	; (8001c60 <uart3_receive+0x128>)
 8001c02:	f7ff fd41 	bl	8001688 <MCAL_USART_SendData>
 8001c06:	e015      	b.n	8001c34 <uart3_receive+0xfc>
	}
	else if(index == 3)
 8001c08:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <uart3_receive+0x120>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d111      	bne.n	8001c34 <uart3_receive+0xfc>
	{
		HAL_LCD_GOTO_XY(1, 7);
 8001c10:	2107      	movs	r1, #7
 8001c12:	2001      	movs	r0, #1
 8001c14:	f7fe fb4e 	bl	80002b4 <HAL_LCD_GOTO_XY>
		HAL_LCD_WRITE_CHAR('3');
 8001c18:	2033      	movs	r0, #51	; 0x33
 8001c1a:	f7fe fc01 	bl	8000420 <HAL_LCD_WRITE_CHAR>
		if(AT_DATA[index]<50) MCAL_USART_SendData(USART1,'k');
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <uart3_receive+0x120>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <uart3_receive+0x124>)
 8001c26:	5c9b      	ldrb	r3, [r3, r2]
 8001c28:	2b31      	cmp	r3, #49	; 0x31
 8001c2a:	d803      	bhi.n	8001c34 <uart3_receive+0xfc>
 8001c2c:	216b      	movs	r1, #107	; 0x6b
 8001c2e:	480c      	ldr	r0, [pc, #48]	; (8001c60 <uart3_receive+0x128>)
 8001c30:	f7ff fd2a 	bl	8001688 <MCAL_USART_SendData>
	}
	index++;
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <uart3_receive+0x120>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <uart3_receive+0x120>)
 8001c3e:	701a      	strb	r2, [r3, #0]
	if(index == 4)
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <uart3_receive+0x120>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d102      	bne.n	8001c4e <uart3_receive+0x116>
		index = 0;
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <uart3_receive+0x120>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40004800 	.word	0x40004800
 8001c58:	20000070 	.word	0x20000070
 8001c5c:	2000006c 	.word	0x2000006c
 8001c60:	40013800 	.word	0x40013800

08001c64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c64:	480d      	ldr	r0, [pc, #52]	; (8001c9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c66:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c68:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c6c:	480c      	ldr	r0, [pc, #48]	; (8001ca0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c6e:	490d      	ldr	r1, [pc, #52]	; (8001ca4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c70:	4a0d      	ldr	r2, [pc, #52]	; (8001ca8 <LoopForever+0xe>)
  movs r3, #0
 8001c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c74:	e002      	b.n	8001c7c <LoopCopyDataInit>

08001c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c7a:	3304      	adds	r3, #4

08001c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c80:	d3f9      	bcc.n	8001c76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c82:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c84:	4c0a      	ldr	r4, [pc, #40]	; (8001cb0 <LoopForever+0x16>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c88:	e001      	b.n	8001c8e <LoopFillZerobss>

08001c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c8c:	3204      	adds	r2, #4

08001c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c90:	d3fb      	bcc.n	8001c8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c92:	f000 f811 	bl	8001cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c96:	f7ff fe30 	bl	80018fa <main>

08001c9a <LoopForever>:

LoopForever:
  b LoopForever
 8001c9a:	e7fe      	b.n	8001c9a <LoopForever>
  ldr   r0, =_estack
 8001c9c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001ca8:	08001d3c 	.word	0x08001d3c
  ldr r2, =_sbss
 8001cac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001cb0:	20000318 	.word	0x20000318

08001cb4 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cb4:	e7fe      	b.n	8001cb4 <ADC3_IRQHandler>
	...

08001cb8 <__libc_init_array>:
 8001cb8:	b570      	push	{r4, r5, r6, lr}
 8001cba:	2500      	movs	r5, #0
 8001cbc:	4e0c      	ldr	r6, [pc, #48]	; (8001cf0 <__libc_init_array+0x38>)
 8001cbe:	4c0d      	ldr	r4, [pc, #52]	; (8001cf4 <__libc_init_array+0x3c>)
 8001cc0:	1ba4      	subs	r4, r4, r6
 8001cc2:	10a4      	asrs	r4, r4, #2
 8001cc4:	42a5      	cmp	r5, r4
 8001cc6:	d109      	bne.n	8001cdc <__libc_init_array+0x24>
 8001cc8:	f000 f81a 	bl	8001d00 <_init>
 8001ccc:	2500      	movs	r5, #0
 8001cce:	4e0a      	ldr	r6, [pc, #40]	; (8001cf8 <__libc_init_array+0x40>)
 8001cd0:	4c0a      	ldr	r4, [pc, #40]	; (8001cfc <__libc_init_array+0x44>)
 8001cd2:	1ba4      	subs	r4, r4, r6
 8001cd4:	10a4      	asrs	r4, r4, #2
 8001cd6:	42a5      	cmp	r5, r4
 8001cd8:	d105      	bne.n	8001ce6 <__libc_init_array+0x2e>
 8001cda:	bd70      	pop	{r4, r5, r6, pc}
 8001cdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ce0:	4798      	blx	r3
 8001ce2:	3501      	adds	r5, #1
 8001ce4:	e7ee      	b.n	8001cc4 <__libc_init_array+0xc>
 8001ce6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001cea:	4798      	blx	r3
 8001cec:	3501      	adds	r5, #1
 8001cee:	e7f2      	b.n	8001cd6 <__libc_init_array+0x1e>
 8001cf0:	08001d34 	.word	0x08001d34
 8001cf4:	08001d34 	.word	0x08001d34
 8001cf8:	08001d34 	.word	0x08001d34
 8001cfc:	08001d38 	.word	0x08001d38

08001d00 <_init>:
 8001d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d02:	bf00      	nop
 8001d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d06:	bc08      	pop	{r3}
 8001d08:	469e      	mov	lr, r3
 8001d0a:	4770      	bx	lr

08001d0c <_fini>:
 8001d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d0e:	bf00      	nop
 8001d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d12:	bc08      	pop	{r3}
 8001d14:	469e      	mov	lr, r3
 8001d16:	4770      	bx	lr
